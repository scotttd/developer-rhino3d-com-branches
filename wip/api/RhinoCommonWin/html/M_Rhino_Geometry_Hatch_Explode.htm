<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Hatch.Explode Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Explode method" /><meta name="System.Keywords" content="Hatch.Explode method" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.Hatch.Explode" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.Hatch.Explode" /><meta name="Description" content="Decomposes the hatch pattern into an array of geometry." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="M_Rhino_Geometry_Hatch_Explode" /><meta name="guid" content="M_Rhino_Geometry_Hatch_Explode" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon SDK<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino.htm" title="RhinoCommon SDK" tocid="roottoc">RhinoCommon SDK</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Rhino_Geometry_Hatch.htm" title="Hatch Class" tocid="T_Rhino_Geometry_Hatch">Hatch Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Rhino_Geometry_Hatch.htm" title="Hatch Methods" tocid="Methods_T_Rhino_Geometry_Hatch">Hatch Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Hatch_Create.htm" title="Create Method " tocid="Overload_Rhino_Geometry_Hatch_Create">Create Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Hatch_CreateDisplayGeometry.htm" title="CreateDisplayGeometry Method " tocid="M_Rhino_Geometry_Hatch_CreateDisplayGeometry">CreateDisplayGeometry Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Hatch_Explode.htm" title="Explode Method " tocid="M_Rhino_Geometry_Hatch_Explode">Explode Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Hatch_Get3dCurves.htm" title="Get3dCurves Method " tocid="M_Rhino_Geometry_Hatch_Get3dCurves">Get3dCurves Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Hatch<span id="LST8207C66E_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8207C66E_0?cpp=::|nu=.");</script>Explode Method </td></tr></table><span class="introStyle">Rhino 5 for Windows</span><div class="summary">
            Decomposes the hatch pattern into an array of geometry.
            </div><p> </p><strong>Namespace:</strong> <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br /><strong>Assembly:</strong> RhinoCommon (in RhinoCommon.dll) Version: 5.1.30000.16 (5.0.20693.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">GeometryBase</span>[] <span class="identifier">Explode</span>()</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">Explode</span> <span class="keyword">As</span> <span class="identifier">GeometryBase</span>()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Return Value</h4>Type: <span id="LST8207C66E_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8207C66E_1?cpp=array&lt;");</script><a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a><span id="LST8207C66E_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8207C66E_2?cpp=&gt;|vb=()|nu=[]");</script><br />An array of geometry that formed the appearance of the original elements.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBABA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','cs','1','2');return false;">C#</a></div><div id="ID0EBBABA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBBABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino.DocObjects;

<span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result ExplodeHatch(Rhino.RhinoDoc doc)
  {
    <span class="highlight-keyword">const</span> ObjectType filter = Rhino.DocObjects.ObjectType.Hatch;
    Rhino.DocObjects.ObjRef objref;
    Rhino.Commands.Result rc = Rhino.Input.RhinoGet.GetOneObject(<span class="highlight-literal">"Select hatch to explode"</span>, <span class="highlight-keyword">false</span>, filter, <span class="highlight-keyword">out</span> objref);
    <span class="highlight-keyword">if</span> (rc != Rhino.Commands.Result.Success || objref == <span class="highlight-keyword">null</span>)
      <span class="highlight-keyword">return</span> rc;

    Rhino.Geometry.Hatch hatch = objref.Geometry() <span class="highlight-keyword">as</span> Rhino.Geometry.Hatch;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == hatch)
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;

    Rhino.Geometry.GeometryBase[] hatch_geom = hatch.Explode();
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != hatch_geom)
    {
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; hatch_geom.Length; i++)
      {
        Rhino.Geometry.GeometryBase geom = hatch_geom[i];
        <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != geom)
        {
          <span class="highlight-keyword">switch</span> (geom.ObjectType)
          {
            <span class="highlight-keyword">case</span> Rhino.DocObjects.ObjectType.Point:
              {
                Rhino.Geometry.Point point = geom <span class="highlight-keyword">as</span> Rhino.Geometry.Point;
                <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != point)
                  doc.Objects.AddPoint(point.Location);
              }
              <span class="highlight-keyword">break</span>;
            <span class="highlight-keyword">case</span> Rhino.DocObjects.ObjectType.Curve:
              {
                Rhino.Geometry.Curve curve = geom <span class="highlight-keyword">as</span> Rhino.Geometry.Curve;
                <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != curve)
                  doc.Objects.AddCurve(curve);
              }
              <span class="highlight-keyword">break</span>;
            <span class="highlight-keyword">case</span> Rhino.DocObjects.ObjectType.Brep:
              {
                Rhino.Geometry.Brep brep = geom <span class="highlight-keyword">as</span> Rhino.Geometry.Brep;
                <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != brep)
                  doc.Objects.AddBrep(brep);
              }
              <span class="highlight-keyword">break</span>;
          }
        }
      }
    }

    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}</pre></div><div id="ID0EBBABA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino.DocObjects

<span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> ExplodeHatch(<span class="highlight-keyword">ByVal</span> doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result

    <span class="highlight-keyword">Const</span> filter <span class="highlight-keyword">As</span> ObjectType = Rhino.DocObjects.ObjectType.Hatch
    <span class="highlight-keyword">Dim</span> objref <span class="highlight-keyword">As</span> Rhino.DocObjects.ObjRef = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> rc <span class="highlight-keyword">As</span> Rhino.Commands.Result = Rhino.Input.RhinoGet.GetOneObject(<span class="highlight-literal">"Select hatch to explode"</span>, <span class="highlight-keyword">False</span>, filter, objref)
    <span class="highlight-keyword">If</span> rc &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">OrElse</span> objref <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> rc
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> hatch <span class="highlight-keyword">As</span> Rhino.Geometry.Hatch = <span class="highlight-keyword">DirectCast</span>(objref.Geometry(), Rhino.Geometry.Hatch)
    <span class="highlight-keyword">If</span> hatch <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> hatch_geom <span class="highlight-keyword">As</span> Rhino.Geometry.GeometryBase() = hatch.Explode()
    <span class="highlight-keyword">If</span> hatch_geom <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> hatch_geom.Length - <span class="highlight-number">1</span>
        <span class="highlight-keyword">Dim</span> geom <span class="highlight-keyword">As</span> Rhino.Geometry.GeometryBase = hatch_geom(i)
        <span class="highlight-keyword">If</span> geom <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
          <span class="highlight-keyword">Select</span> <span class="highlight-keyword">Case</span> geom.ObjectType
            <span class="highlight-keyword">Case</span> Rhino.DocObjects.ObjectType.Point
              <span class="highlight-keyword">If</span> <span class="highlight-keyword">True</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Dim</span> point <span class="highlight-keyword">As</span> Rhino.Geometry.Point = <span class="highlight-keyword">TryCast</span>(geom, Rhino.Geometry.Point)
                <span class="highlight-keyword">If</span> point <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                  doc.Objects.AddPoint(point.Location)
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
              <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
              <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
            <span class="highlight-keyword">Case</span> Rhino.DocObjects.ObjectType.Curve
              <span class="highlight-keyword">If</span> <span class="highlight-keyword">True</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Dim</span> curve <span class="highlight-keyword">As</span> Rhino.Geometry.Curve = <span class="highlight-keyword">TryCast</span>(geom, Rhino.Geometry.Curve)
                <span class="highlight-keyword">If</span> curve <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                  doc.Objects.AddCurve(curve)
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
              <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
              <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
            <span class="highlight-keyword">Case</span> Rhino.DocObjects.ObjectType.Brep
              <span class="highlight-keyword">If</span> <span class="highlight-keyword">True</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Dim</span> brep <span class="highlight-keyword">As</span> Rhino.Geometry.Brep = <span class="highlight-keyword">TryCast</span>(geom, Rhino.Geometry.Brep)
                <span class="highlight-keyword">If</span> brep <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                  doc.Objects.AddBrep(brep)
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
              <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
              <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
          <span class="highlight-keyword">End</span> <span class="highlight-keyword">Select</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Next</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBABA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext

<span class="highlight-keyword">def</span> ExplodeHatch():
    filter = Rhino.DocObjects.ObjectType.Hatch
    rc, objref = Rhino.Input.RhinoGet.GetOneObject(<span class="highlight-literal">"Select hatch to explode"</span>, False, filter)
    <span class="highlight-keyword">if</span> rc != Rhino.Commands.Result.Success: <span class="highlight-keyword">return</span>

    hatch = objref.Geometry()
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> hatch: <span class="highlight-keyword">return</span>

    hatch_geom = hatch.Explode()
    <span class="highlight-keyword">if</span> hatch_geom:
      <span class="highlight-keyword">for</span> geom <span class="highlight-keyword">in</span> hatch_geom:
          <span class="highlight-keyword">if</span> geom.ObjectType == Rhino.DocObjects.ObjectType.Point:
              scriptcontext.doc.Objects.AddPoint(geom)
          <span class="highlight-keyword">elif</span> geom.ObjectType == Rhino.DocObjects.ObjectType.Curve:
              scriptcontext.doc.Objects.AddCurve(geom)
          <span class="highlight-keyword">elif</span> geom.ObjectType == Rhino.DocObjects.ObjectType.Brep:
              scriptcontext.doc.Objects.AddBrep(geom)
      scriptcontext.doc.Views.Redraw()

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    ExplodeHatch()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_Hatch.htm">Hatch Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Updated 10 March 2016 - Robert McNeel and Associates<p><a href="http://discourse.mcneel.com/" target="_blank">Report wishes and bugs: http://discourse.mcneel.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:steve%40mcneel.com?Subject=RhinoCommon SDK">steve@mcneel.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>