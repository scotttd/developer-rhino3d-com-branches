<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Surface.TryGetPlane Method (Plane, Double)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.Surface.TryGetPlane(Rhino.Geometry.Plane@,System.Double)" /><meta name="Description" content="Tests a surface for planarity and return the plane." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="M_Rhino_Geometry_Surface_TryGetPlane_1" /><meta name="guid" content="M_Rhino_Geometry_Surface_TryGetPlane_1" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon SDK<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino.htm" title="RhinoCommon SDK" tocid="roottoc">RhinoCommon SDK</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Rhino_Geometry_Surface.htm" title="Surface Class" tocid="T_Rhino_Geometry_Surface">Surface Class</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Rhino_Geometry_Surface.htm" title="Surface Methods" tocid="Methods_T_Rhino_Geometry_Surface">Surface Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Surface_TryGetPlane.htm" title="TryGetPlane Method " tocid="Overload_Rhino_Geometry_Surface_TryGetPlane">TryGetPlane Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Surface_TryGetPlane.htm" title="TryGetPlane Method (Plane)" tocid="M_Rhino_Geometry_Surface_TryGetPlane">TryGetPlane Method (Plane)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Surface_TryGetPlane_1.htm" title="TryGetPlane Method (Plane, Double)" tocid="M_Rhino_Geometry_Surface_TryGetPlane_1">TryGetPlane Method (Plane, Double)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Surface<span id="LST2348FFC4_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2348FFC4_0?cpp=::|nu=.");</script>TryGetPlane Method (Plane<span id="LST2348FFC4_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2348FFC4_1?cpp=%");</script>, Double)</td></tr></table><span class="introStyle">Rhino 5 for Windows</span><div class="summary">Tests a surface for planarity and return the plane.</div><p> </p><strong>Namespace:</strong> <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br /><strong>Assembly:</strong> RhinoCommon (in RhinoCommon.dll) Version: 5.1.30000.16 (5.0.20693.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">bool</span> <span class="identifier">TryGetPlane</span>(
	<span class="keyword">out</span> <span class="identifier">Plane</span> <span class="parameter">plane</span>,
	<span class="identifier">double</span> <span class="parameter">tolerance</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">TryGetPlane</span> ( 
	&lt;<span class="identifier">OutAttribute</span>&gt; <span class="keyword">ByRef</span> <span class="parameter">plane</span> <span class="keyword">As</span> <span class="identifier">Plane</span>,
	<span class="parameter">tolerance</span> <span class="keyword">As</span> <span class="identifier">Double</span>
) <span class="keyword">As</span> <span class="identifier">Boolean</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">plane</span></dt><dd>Type: <a href="T_Rhino_Geometry_Plane.htm">Rhino.Geometry<span id="LST2348FFC4_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2348FFC4_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Plane</a><span id="LST2348FFC4_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2348FFC4_3?cpp=%");</script><br />On success, the plane parameters are filled in.</dd><dt><span class="parameter">tolerance</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/643eft0t" target="_blank">System<span id="LST2348FFC4_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2348FFC4_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Double</a><br />tolerance to use when checking.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">Boolean</a><br />
            true if there is a plane such that the maximum distance from the surface to the plane is &lt;= tolerance.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBABA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','cs','1','2');return false;">C#</a></div><div id="ID0EBBABA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBBABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;

<span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">bool</span> IsBrepBox(Rhino.Geometry.Brep brep)
  {
    <span class="highlight-keyword">const</span> <span class="highlight-keyword">double</span> zero_tolerance = <span class="highlight-number">1.0</span>e<span class="highlight-number">-6</span>; <span class="highlight-comment">// or whatever</span>
    <span class="highlight-keyword">bool</span> rc = brep.IsSolid;
    <span class="highlight-keyword">if</span>( rc )
      rc = brep.Faces.Count == <span class="highlight-number">6</span>;

    <span class="highlight-keyword">var</span> N = <span class="highlight-keyword">new</span> Rhino.Geometry.Vector3d[<span class="highlight-number">6</span>];
    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; rc &amp;&amp; i &lt; <span class="highlight-number">6</span>; i++)
    {
      Rhino.Geometry.Plane plane;
      rc = brep.Faces[i].TryGetPlane(<span class="highlight-keyword">out</span> plane, zero_tolerance);
      <span class="highlight-keyword">if</span>( rc )
      {
        N[i] = plane.ZAxis;
        N[i].Unitize();
      }
    }

    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; rc &amp;&amp; i &lt; <span class="highlight-number">6</span>; i++)
    {
      <span class="highlight-keyword">int</span> count = <span class="highlight-number">0</span>;
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> j = <span class="highlight-number">0</span>; rc &amp;&amp; j &lt; <span class="highlight-number">6</span>; j++)
      {
        <span class="highlight-keyword">double</span> dot = Math.Abs(N[i] * N[j]);
        <span class="highlight-keyword">if</span> (dot &lt;= zero_tolerance)
          <span class="highlight-keyword">continue</span>;
        <span class="highlight-keyword">if</span> (Math.Abs(dot - <span class="highlight-number">1.0</span>) &lt;= zero_tolerance) 
          count++;
        <span class="highlight-keyword">else</span>
          rc = <span class="highlight-keyword">false</span>;
      }

      <span class="highlight-keyword">if</span> (rc)
      {
        <span class="highlight-keyword">if</span> (<span class="highlight-number">2</span> != count)
          rc = <span class="highlight-keyword">false</span>;
      }
    }
    <span class="highlight-keyword">return</span> rc;
  }

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result TestBrepBox(Rhino.RhinoDoc doc)
  {
    Rhino.DocObjects.ObjRef obj_ref;
    <span class="highlight-keyword">var</span> rc = Rhino.Input.RhinoGet.GetOneObject(<span class="highlight-literal">"Select Brep"</span>, <span class="highlight-keyword">true</span>, Rhino.DocObjects.ObjectType.Brep, <span class="highlight-keyword">out</span> obj_ref);
    <span class="highlight-keyword">if</span> (rc == Rhino.Commands.Result.Success)
    {
      <span class="highlight-keyword">var</span> brep = obj_ref.Brep();
      <span class="highlight-keyword">if</span> (brep != <span class="highlight-keyword">null</span>)
      {
        Rhino.RhinoApp.WriteLine(IsBrepBox(brep) ? <span class="highlight-literal">"Yes it is a box"</span> : <span class="highlight-literal">"No it is not a box"</span>);
      }
    }
    <span class="highlight-keyword">return</span> rc;
  }
}</pre></div><div id="ID0EBBABA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> IsBrepBox(brep <span class="highlight-keyword">As</span> Rhino.Geometry.Brep) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
    <span class="highlight-keyword">Const</span> zero_tolerance <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-number">0.000001</span> <span class="highlight-comment">' or whatever</span>
    <span class="highlight-keyword">Dim</span> rc <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = brep.IsSolid
    <span class="highlight-keyword">If</span> rc <span class="highlight-keyword">Then</span>
      rc = brep.Faces.Count = <span class="highlight-number">6</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> N = <span class="highlight-keyword">New</span> Rhino.Geometry.Vector3d(<span class="highlight-number">5</span>) {}
    <span class="highlight-keyword">Dim</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
    <span class="highlight-keyword">While</span> rc <span class="highlight-keyword">AndAlso</span> i &lt; <span class="highlight-number">6</span>
      <span class="highlight-keyword">Dim</span> plane <span class="highlight-keyword">As</span> Rhino.Geometry.Plane
      rc = brep.Faces(i).TryGetPlane(plane, zero_tolerance)
      <span class="highlight-keyword">If</span> rc <span class="highlight-keyword">Then</span>
        N(i) = plane.ZAxis
        N(i).Unitize()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      i += <span class="highlight-number">1</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>

    i = <span class="highlight-number">0</span>
    <span class="highlight-keyword">While</span> rc <span class="highlight-keyword">AndAlso</span> i &lt; <span class="highlight-number">6</span>
      <span class="highlight-keyword">Dim</span> count <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
      <span class="highlight-keyword">Dim</span> j <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
      <span class="highlight-keyword">While</span> rc <span class="highlight-keyword">AndAlso</span> j &lt; <span class="highlight-number">6</span>
        <span class="highlight-keyword">Dim</span> dot <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = Math.Abs(N(i) * N(j))
        <span class="highlight-keyword">If</span> dot &lt;= zero_tolerance <span class="highlight-keyword">Then</span>
          <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">While</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">If</span> Math.Abs(dot - <span class="highlight-number">1.0</span>) &lt;= zero_tolerance <span class="highlight-keyword">Then</span>
          count += <span class="highlight-number">1</span>
        <span class="highlight-keyword">Else</span>
          rc = <span class="highlight-keyword">False</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        j += <span class="highlight-number">1</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>

      <span class="highlight-keyword">If</span> rc <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">If</span> <span class="highlight-number">2</span> &lt;&gt; count <span class="highlight-keyword">Then</span>
          rc = <span class="highlight-keyword">False</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      i += <span class="highlight-number">1</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
    <span class="highlight-keyword">Return</span> rc
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> TestBrepBox(doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-keyword">Dim</span> obj_ref <span class="highlight-keyword">As</span> Rhino.DocObjects.ObjRef = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> rc = Rhino.Input.RhinoGet.GetOneObject(<span class="highlight-literal">"Select Brep"</span>, <span class="highlight-keyword">True</span>, Rhino.DocObjects.ObjectType.Brep, obj_ref)
    <span class="highlight-keyword">If</span> rc = Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Dim</span> brep = obj_ref.Brep()
      <span class="highlight-keyword">If</span> brep <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">If</span> IsBrepBox(brep) <span class="highlight-keyword">Then</span>
          Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Yes it is a box"</span>)
        <span class="highlight-keyword">Else</span>
          Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"No it is not a box"</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Return</span> rc
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBABA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino

<span class="highlight-keyword">def</span> IsBrepBox(brep):
    zero_tolerance = <span class="highlight-number">1.0</span>e<span class="highlight-number">-6</span> <span class="highlight-comment">#or whatever</span>
    rc = brep.IsSolid
    <span class="highlight-keyword">if</span> rc: rc = brep.Faces.Count == <span class="highlight-number">6</span>

    N = []
    <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">6</span>):
        <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> rc: <span class="highlight-keyword">break</span>
        rc, plane = brep.Faces[i].TryGetPlane(zero_tolerance)
        <span class="highlight-keyword">if</span> rc:
            v = plane.ZAxis
            v.Unitize()
            N.append(v)

    <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">6</span>):
        count = <span class="highlight-number">0</span>
        <span class="highlight-keyword">for</span> j <span class="highlight-keyword">in</span> range(<span class="highlight-number">6</span>):
            <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> rc: <span class="highlight-keyword">break</span>
            dot = abs(N[i] * N[j])
            <span class="highlight-keyword">if</span> dot&lt;=zero_tolerance: <span class="highlight-keyword">continue</span>
            <span class="highlight-keyword">if</span> abs(dot<span class="highlight-number">-1.0</span>)&lt;=zero_tolerance:
              count += <span class="highlight-number">1</span>
            <span class="highlight-keyword">else</span>:
              rc = False

    <span class="highlight-keyword">if</span> rc:
        <span class="highlight-keyword">if</span> <span class="highlight-number">2</span>!=count: rc = False
    <span class="highlight-keyword">return</span> rc


<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    rc, objref = Rhino.Input.RhinoGet.GetOneObject(<span class="highlight-literal">"Select Brep"</span>, True, Rhino.DocObjects.ObjectType.Brep)
    <span class="highlight-keyword">if</span> rc==Rhino.Commands.Result.Success:
        brep = objref.Brep()
        <span class="highlight-keyword">if</span> brep:
            <span class="highlight-keyword">if</span> IsBrepBox(brep): <span class="highlight-keyword">print</span> <span class="highlight-literal">"Yes it is a box"</span>
            <span class="highlight-keyword">else</span>: <span class="highlight-keyword">print</span> <span class="highlight-literal">"No it is not a box"</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_Surface.htm">Surface Class</a></div><div class="seeAlsoStyle"><a href="Overload_Rhino_Geometry_Surface_TryGetPlane.htm">TryGetPlane Overload</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Updated 10 March 2016 - Robert McNeel and Associates<p><a href="http://discourse.mcneel.com/" target="_blank">Report wishes and bugs: http://discourse.mcneel.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:steve%40mcneel.com?Subject=RhinoCommon SDK">steve@mcneel.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>