<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Curve Methods</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Curve class, methods" /><meta name="Microsoft.Help.Id" content="Methods.T:Rhino.Geometry.Curve" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="Methods_T_Rhino_Geometry_Curve" /><meta name="guid" content="Methods_T_Rhino_Geometry_Curve" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon SDK<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino.htm" title="RhinoCommon SDK" tocid="roottoc">RhinoCommon SDK</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Rhino_Geometry_Curve.htm" title="Curve Class" tocid="T_Rhino_Geometry_Curve">Curve Class</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Rhino_Geometry_Curve.htm" title="Curve Methods" tocid="Methods_T_Rhino_Geometry_Curve">Curve Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_ChangeClosedCurveSeam.htm" title="ChangeClosedCurveSeam Method " tocid="M_Rhino_Geometry_Curve_ChangeClosedCurveSeam">ChangeClosedCurveSeam Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_ChangeDimension.htm" title="ChangeDimension Method " tocid="M_Rhino_Geometry_Curve_ChangeDimension">ChangeDimension Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_ClosedCurveOrientation.htm" title="ClosedCurveOrientation Method " tocid="Overload_Rhino_Geometry_Curve_ClosedCurveOrientation">ClosedCurveOrientation Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_ClosestPoint.htm" title="ClosestPoint Method " tocid="Overload_Rhino_Geometry_Curve_ClosestPoint">ClosestPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_ClosestPoints.htm" title="ClosestPoints Method " tocid="Overload_Rhino_Geometry_Curve_ClosestPoints">ClosestPoints Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_Contains.htm" title="Contains Method " tocid="Overload_Rhino_Geometry_Curve_Contains">Contains Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_CreateBlendCurve.htm" title="CreateBlendCurve Method " tocid="Overload_Rhino_Geometry_Curve_CreateBlendCurve">CreateBlendCurve Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_CreateBooleanDifference.htm" title="CreateBooleanDifference Method " tocid="Overload_Rhino_Geometry_Curve_CreateBooleanDifference">CreateBooleanDifference Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_CreateBooleanIntersection.htm" title="CreateBooleanIntersection Method " tocid="M_Rhino_Geometry_Curve_CreateBooleanIntersection">CreateBooleanIntersection Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_CreateBooleanUnion.htm" title="CreateBooleanUnion Method " tocid="M_Rhino_Geometry_Curve_CreateBooleanUnion">CreateBooleanUnion Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_CreateControlPointCurve.htm" title="CreateControlPointCurve Method " tocid="Overload_Rhino_Geometry_Curve_CreateControlPointCurve">CreateControlPointCurve Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_CreateFillet.htm" title="CreateFillet Method " tocid="M_Rhino_Geometry_Curve_CreateFillet">CreateFillet Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_CreateFilletCurves.htm" title="CreateFilletCurves Method " tocid="M_Rhino_Geometry_Curve_CreateFilletCurves">CreateFilletCurves Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_CreateInterpolatedCurve.htm" title="CreateInterpolatedCurve Method " tocid="Overload_Rhino_Geometry_Curve_CreateInterpolatedCurve">CreateInterpolatedCurve Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_CreateMeanCurve.htm" title="CreateMeanCurve Method " tocid="Overload_Rhino_Geometry_Curve_CreateMeanCurve">CreateMeanCurve Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_CreateTweenCurves.htm" title="CreateTweenCurves Method " tocid="M_Rhino_Geometry_Curve_CreateTweenCurves">CreateTweenCurves Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_CreateTweenCurvesWithMatching.htm" title="CreateTweenCurvesWithMatching Method " tocid="M_Rhino_Geometry_Curve_CreateTweenCurvesWithMatching">CreateTweenCurvesWithMatching Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_CreateTweenCurvesWithSampling.htm" title="CreateTweenCurvesWithSampling Method " tocid="M_Rhino_Geometry_Curve_CreateTweenCurvesWithSampling">CreateTweenCurvesWithSampling Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_CurvatureAt.htm" title="CurvatureAt Method " tocid="M_Rhino_Geometry_Curve_CurvatureAt">CurvatureAt Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_DerivativeAt.htm" title="DerivativeAt Method " tocid="Overload_Rhino_Geometry_Curve_DerivativeAt">DerivativeAt Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_Dispose.htm" title="Dispose Method " tocid="Overload_Rhino_Geometry_Curve_Dispose">Dispose Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_DivideAsContour.htm" title="DivideAsContour Method " tocid="M_Rhino_Geometry_Curve_DivideAsContour">DivideAsContour Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_DivideByCount.htm" title="DivideByCount Method " tocid="Overload_Rhino_Geometry_Curve_DivideByCount">DivideByCount Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_DivideByLength.htm" title="DivideByLength Method " tocid="Overload_Rhino_Geometry_Curve_DivideByLength">DivideByLength Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_DivideEquidistant.htm" title="DivideEquidistant Method " tocid="M_Rhino_Geometry_Curve_DivideEquidistant">DivideEquidistant Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_DoDirectionsMatch.htm" title="DoDirectionsMatch Method " tocid="M_Rhino_Geometry_Curve_DoDirectionsMatch">DoDirectionsMatch Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_Duplicate.htm" title="Duplicate Method " tocid="M_Rhino_Geometry_Curve_Duplicate">Duplicate Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_DuplicateCurve.htm" title="DuplicateCurve Method " tocid="M_Rhino_Geometry_Curve_DuplicateCurve">DuplicateCurve Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_DuplicateSegments.htm" title="DuplicateSegments Method " tocid="M_Rhino_Geometry_Curve_DuplicateSegments">DuplicateSegments Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_Extend.htm" title="Extend Method " tocid="Overload_Rhino_Geometry_Curve_Extend">Extend Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_ExtendByArc.htm" title="ExtendByArc Method " tocid="M_Rhino_Geometry_Curve_ExtendByArc">ExtendByArc Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_ExtendByLine.htm" title="ExtendByLine Method " tocid="M_Rhino_Geometry_Curve_ExtendByLine">ExtendByLine Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_ExtendOnSurface.htm" title="ExtendOnSurface Method " tocid="Overload_Rhino_Geometry_Curve_ExtendOnSurface">ExtendOnSurface Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_Fair.htm" title="Fair Method " tocid="M_Rhino_Geometry_Curve_Fair">Fair Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_Fit.htm" title="Fit Method " tocid="M_Rhino_Geometry_Curve_Fit">Fit Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_FrameAt.htm" title="FrameAt Method " tocid="M_Rhino_Geometry_Curve_FrameAt">FrameAt Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_GetCurveParameterFromNurbsFormParameter.htm" title="GetCurveParameterFromNurbsFormParameter Method " tocid="M_Rhino_Geometry_Curve_GetCurveParameterFromNurbsFormParameter">GetCurveParameterFromNurbsFormParameter Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_GetDistancesBetweenCurves.htm" title="GetDistancesBetweenCurves Method " tocid="M_Rhino_Geometry_Curve_GetDistancesBetweenCurves">GetDistancesBetweenCurves Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_GetFilletPoints.htm" title="GetFilletPoints Method " tocid="M_Rhino_Geometry_Curve_GetFilletPoints">GetFilletPoints Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_GetLength.htm" title="GetLength Method " tocid="Overload_Rhino_Geometry_Curve_GetLength">GetLength Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_GetNextDiscontinuity.htm" title="GetNextDiscontinuity Method " tocid="M_Rhino_Geometry_Curve_GetNextDiscontinuity">GetNextDiscontinuity Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_GetNurbsFormParameterFromCurveParameter.htm" title="GetNurbsFormParameterFromCurveParameter Method " tocid="M_Rhino_Geometry_Curve_GetNurbsFormParameterFromCurveParameter">GetNurbsFormParameterFromCurveParameter Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_GetPerpendicularFrames.htm" title="GetPerpendicularFrames Method " tocid="M_Rhino_Geometry_Curve_GetPerpendicularFrames">GetPerpendicularFrames Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_HasNurbsForm.htm" title="HasNurbsForm Method " tocid="M_Rhino_Geometry_Curve_HasNurbsForm">HasNurbsForm Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_IsArc.htm" title="IsArc Method " tocid="Overload_Rhino_Geometry_Curve_IsArc">IsArc Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_IsCircle.htm" title="IsCircle Method " tocid="Overload_Rhino_Geometry_Curve_IsCircle">IsCircle Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_IsClosable.htm" title="IsClosable Method " tocid="Overload_Rhino_Geometry_Curve_IsClosable">IsClosable Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_IsContinuous.htm" title="IsContinuous Method " tocid="M_Rhino_Geometry_Curve_IsContinuous">IsContinuous Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_IsEllipse.htm" title="IsEllipse Method " tocid="Overload_Rhino_Geometry_Curve_IsEllipse">IsEllipse Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_IsInPlane.htm" title="IsInPlane Method " tocid="Overload_Rhino_Geometry_Curve_IsInPlane">IsInPlane Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_IsLinear.htm" title="IsLinear Method " tocid="Overload_Rhino_Geometry_Curve_IsLinear">IsLinear Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_IsPlanar.htm" title="IsPlanar Method " tocid="Overload_Rhino_Geometry_Curve_IsPlanar">IsPlanar Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_IsPolyline.htm" title="IsPolyline Method " tocid="M_Rhino_Geometry_Curve_IsPolyline">IsPolyline Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_IsShort.htm" title="IsShort Method " tocid="Overload_Rhino_Geometry_Curve_IsShort">IsShort Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_JoinCurves.htm" title="JoinCurves Method " tocid="Overload_Rhino_Geometry_Curve_JoinCurves">JoinCurves Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_LengthParameter.htm" title="LengthParameter Method " tocid="Overload_Rhino_Geometry_Curve_LengthParameter">LengthParameter Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_MakeClosed.htm" title="MakeClosed Method " tocid="M_Rhino_Geometry_Curve_MakeClosed">MakeClosed Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_MakeEndsMeet.htm" title="MakeEndsMeet Method " tocid="M_Rhino_Geometry_Curve_MakeEndsMeet">MakeEndsMeet Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_NonConstOperation.htm" title="NonConstOperation Method " tocid="M_Rhino_Geometry_Curve_NonConstOperation">NonConstOperation Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_NormalizedLengthParameter.htm" title="NormalizedLengthParameter Method " tocid="Overload_Rhino_Geometry_Curve_NormalizedLengthParameter">NormalizedLengthParameter Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_NormalizedLengthParameters.htm" title="NormalizedLengthParameters Method " tocid="Overload_Rhino_Geometry_Curve_NormalizedLengthParameters">NormalizedLengthParameters Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_Offset.htm" title="Offset Method " tocid="Overload_Rhino_Geometry_Curve_Offset">Offset Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_OffsetNormalToSurface.htm" title="OffsetNormalToSurface Method " tocid="M_Rhino_Geometry_Curve_OffsetNormalToSurface">OffsetNormalToSurface Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_OffsetOnSurface.htm" title="OffsetOnSurface Method " tocid="Overload_Rhino_Geometry_Curve_OffsetOnSurface">OffsetOnSurface Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_PerpendicularFrameAt.htm" title="PerpendicularFrameAt Method " tocid="M_Rhino_Geometry_Curve_PerpendicularFrameAt">PerpendicularFrameAt Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_PlanarClosedCurveRelationship.htm" title="PlanarClosedCurveRelationship Method " tocid="M_Rhino_Geometry_Curve_PlanarClosedCurveRelationship">PlanarClosedCurveRelationship Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_PlanarCurveCollision.htm" title="PlanarCurveCollision Method " tocid="M_Rhino_Geometry_Curve_PlanarCurveCollision">PlanarCurveCollision Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_PointAt.htm" title="PointAt Method " tocid="M_Rhino_Geometry_Curve_PointAt">PointAt Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_PointAtLength.htm" title="PointAtLength Method " tocid="M_Rhino_Geometry_Curve_PointAtLength">PointAtLength Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_PointAtNormalizedLength.htm" title="PointAtNormalizedLength Method " tocid="M_Rhino_Geometry_Curve_PointAtNormalizedLength">PointAtNormalizedLength Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_ProjectToBrep.htm" title="ProjectToBrep Method " tocid="Overload_Rhino_Geometry_Curve_ProjectToBrep">ProjectToBrep Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_ProjectToMesh.htm" title="ProjectToMesh Method " tocid="Overload_Rhino_Geometry_Curve_ProjectToMesh">ProjectToMesh Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_ProjectToPlane.htm" title="ProjectToPlane Method " tocid="M_Rhino_Geometry_Curve_ProjectToPlane">ProjectToPlane Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_PullToBrepFace.htm" title="PullToBrepFace Method " tocid="Overload_Rhino_Geometry_Curve_PullToBrepFace">PullToBrepFace Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_PullToMesh.htm" title="PullToMesh Method " tocid="M_Rhino_Geometry_Curve_PullToMesh">PullToMesh Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_Rebuild.htm" title="Rebuild Method " tocid="M_Rhino_Geometry_Curve_Rebuild">Rebuild Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_RemoveShortSegments.htm" title="RemoveShortSegments Method " tocid="M_Rhino_Geometry_Curve_RemoveShortSegments">RemoveShortSegments Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_Reverse.htm" title="Reverse Method " tocid="M_Rhino_Geometry_Curve_Reverse">Reverse Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_SetEndPoint.htm" title="SetEndPoint Method " tocid="M_Rhino_Geometry_Curve_SetEndPoint">SetEndPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_SetStartPoint.htm" title="SetStartPoint Method " tocid="M_Rhino_Geometry_Curve_SetStartPoint">SetStartPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_Simplify.htm" title="Simplify Method " tocid="M_Rhino_Geometry_Curve_Simplify">Simplify Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_SimplifyEnd.htm" title="SimplifyEnd Method " tocid="M_Rhino_Geometry_Curve_SimplifyEnd">SimplifyEnd Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_SpanDomain.htm" title="SpanDomain Method " tocid="M_Rhino_Geometry_Curve_SpanDomain">SpanDomain Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_Split.htm" title="Split Method " tocid="Overload_Rhino_Geometry_Curve_Split">Split Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Curve_TangentAt.htm" title="TangentAt Method " tocid="M_Rhino_Geometry_Curve_TangentAt">TangentAt Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_ToNurbsCurve.htm" title="ToNurbsCurve Method " tocid="Overload_Rhino_Geometry_Curve_ToNurbsCurve">ToNurbsCurve Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_ToPolyline.htm" title="ToPolyline Method " tocid="Overload_Rhino_Geometry_Curve_ToPolyline">ToPolyline Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_Trim.htm" title="Trim Method " tocid="Overload_Rhino_Geometry_Curve_Trim">Trim Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_TryGetArc.htm" title="TryGetArc Method " tocid="Overload_Rhino_Geometry_Curve_TryGetArc">TryGetArc Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_TryGetCircle.htm" title="TryGetCircle Method " tocid="Overload_Rhino_Geometry_Curve_TryGetCircle">TryGetCircle Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_TryGetEllipse.htm" title="TryGetEllipse Method " tocid="Overload_Rhino_Geometry_Curve_TryGetEllipse">TryGetEllipse Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_TryGetPlane.htm" title="TryGetPlane Method " tocid="Overload_Rhino_Geometry_Curve_TryGetPlane">TryGetPlane Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Curve_TryGetPolyline.htm" title="TryGetPolyline Method " tocid="Overload_Rhino_Geometry_Curve_TryGetPolyline">TryGetPolyline Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Curve Methods</td></tr></table><span class="introStyle">Rhino for Mac 5.1</span><p>The <a href="T_Rhino_Geometry_Curve.htm">Curve</a> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID0RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ChangeClosedCurveSeam.htm">ChangeClosedCurveSeam</a></td><td><div class="summary">
            If this curve is closed, then modify it so that the start/end point is at curve parameter t.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ChangeDimension.htm">ChangeDimension</a></td><td><div class="summary">
            Changes the dimension of a curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ClosedCurveOrientation.htm">ClosedCurveOrientation(Plane)</a></td><td><div class="summary">
            Determines the orientation (counterclockwise or clockwise) of a closed planar curve in a given plane.
            Only works with simple (no self intersections) closed planar curves.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ClosedCurveOrientation_1.htm">ClosedCurveOrientation(Transform)</a></td><td><div class="summary">
            Determines the orientation (counterclockwise or clockwise) of a closed planar curve.
            Only works with simple (no self intersections) closed planar curves.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ClosedCurveOrientation_2.htm">ClosedCurveOrientation(Vector3d)</a></td><td><div class="summary">
            Determines the orientation (counterclockwise or clockwise) of a closed planar curve in a given plane.
            Only works with simple (no self intersections) closed planar curves.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ClosestPoint.htm">ClosestPoint(Point3d, Double<span id="LSTE1ED6617_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_0?cpp=%");</script>)</a></td><td><div class="summary">
            Finds parameter of the point on a curve that is closest to testPoint.
            If the maximumDistance parameter is &gt; 0, then only points whose distance
            to the given point is &lt;= maximumDistance will be returned.  Using a
            positive value of maximumDistance can substantially speed up the search.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ClosestPoint_1.htm">ClosestPoint(Point3d, Double<span id="LSTE1ED6617_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_1?cpp=%");</script>, Double)</a></td><td><div class="summary">
            Finds the parameter of the point on a curve that is closest to testPoint.
            If the maximumDistance parameter is &gt; 0, then only points whose distance
            to the given point is &lt;= maximumDistance will be returned.  Using a
            positive value of maximumDistance can substantially speed up the search.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ClosestPoints.htm">ClosestPoints(Curve, Point3d<span id="LSTE1ED6617_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_2?cpp=%");</script>, Point3d<span id="LSTE1ED6617_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_3?cpp=%");</script>)</a></td><td><div class="summary">
            Gets closest points between this and another curves.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ClosestPoints_1.htm">ClosestPoints(IEnumerable<span id="LSTE1ED6617_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_4?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>GeometryBase<span id="LSTE1ED6617_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_5?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Point3d<span id="LSTE1ED6617_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_6?cpp=%");</script>, Point3d<span id="LSTE1ED6617_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_7?cpp=%");</script>, Int32<span id="LSTE1ED6617_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_8?cpp=%");</script>)</a></td><td><div class="summary">
            Finds the object (and the closest point in that object) that is closest to
            this curve. <p><a href="T_Rhino_Geometry_Brep.htm">Breps</a>, <a href="T_Rhino_Geometry_Surface.htm">surfaces</a>,
            <a href="T_Rhino_Geometry_Curve.htm">curves</a> and <a href="T_Rhino_Geometry_PointCloud.htm">point clouds</a> are examples of
            objects that can be passed to this function.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ClosestPoints_2.htm">ClosestPoints(IEnumerable<span id="LSTE1ED6617_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_9?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>GeometryBase<span id="LSTE1ED6617_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_10?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Point3d<span id="LSTE1ED6617_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_11?cpp=%");</script>, Point3d<span id="LSTE1ED6617_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_12?cpp=%");</script>, Int32<span id="LSTE1ED6617_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_13?cpp=%");</script>, Double)</a></td><td><div class="summary">
            Finds the object (and the closest point in that object) that is closest to
            this curve. <p><a href="T_Rhino_Geometry_Brep.htm">Breps</a>, <a href="T_Rhino_Geometry_Surface.htm">surfaces</a>,
            <a href="T_Rhino_Geometry_Curve.htm">curves</a> and <a href="T_Rhino_Geometry_PointCloud.htm">point clouds</a> are examples of
            objects that can be passed to this function.</p></div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_ComponentIndex.htm">ComponentIndex</a></td><td><div class="summary">
            If this piece of geometry is a component in something larger, like a BrepEdge
            in a Brep, then this function returns the component index.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Rhino_Runtime_CommonObject_ConstructConstObject.htm">ConstructConstObject</a></td><td><div class="summary">
            Assigns a parent object and a subobject index to this.
            </div> (Inherited from <a href="T_Rhino_Runtime_CommonObject.htm">CommonObject</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Contains.htm">Contains(Point3d)</a></td><td><div class="summary">
            Computes the relationship between a point and a closed curve region.
            This curve must be closed or the return value will be Unset.
            Both curve and point are projected to the World XY plane.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Contains_1.htm">Contains(Point3d, Plane)</a></td><td><div class="summary">
            Computes the relationship between a point and a closed curve region.
            This curve must be closed or the return value will be Unset.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Contains_2.htm">Contains(Point3d, Plane, Double)</a></td><td><div class="summary">
            Computes the relationship between a point and a closed curve region.
            This curve must be closed or the return value will be Unset.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateBlendCurve.htm">CreateBlendCurve(Curve, Curve, BlendContinuity)</a></td><td><div class="summary">
            Create a Blend curve between two existing curves.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateBlendCurve_1.htm">CreateBlendCurve(Curve, Curve, BlendContinuity, Double, Double)</a></td><td><div class="summary">
            Create a Blend curve between two existing curves.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateBlendCurve_2.htm">CreateBlendCurve(Curve, Double, Boolean, BlendContinuity, Curve, Double, Boolean, BlendContinuity)</a></td><td><div class="summary">
            Makes a curve blend between 2 curves at the parameters specified
            with the directions and continuities specified
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateBooleanDifference.htm">CreateBooleanDifference(Curve, Curve)</a></td><td><div class="summary">
            Calculates the boolean difference between two closed, planar curves.
            Note, curves must be co-planar.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateBooleanDifference_1.htm">CreateBooleanDifference(Curve, IEnumerable<span id="LSTE1ED6617_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_14?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Curve<span id="LSTE1ED6617_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_15?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a></td><td><div class="summary">
            Calculates the boolean difference between a closed planar curve, and a list of closed planar curves.
            Note, curves must be co-planar.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateBooleanIntersection.htm">CreateBooleanIntersection</a></td><td><div class="summary">
            Calculates the boolean intersection of two closed, planar curves.
            Note, curves must be co-planar.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateBooleanUnion.htm">CreateBooleanUnion</a></td><td><div class="summary">
            Calculates the boolean union of two or more closed, planar curves.
            Note, curves must be co-planar.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateControlPointCurve.htm">CreateControlPointCurve(IEnumerable<span id="LSTE1ED6617_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_16?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Point3d<span id="LSTE1ED6617_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_17?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a></td><td><div class="summary">
            Constructs a control-point of degree=3 (or less).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateControlPointCurve_1.htm">CreateControlPointCurve(IEnumerable<span id="LSTE1ED6617_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_18?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Point3d<span id="LSTE1ED6617_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_19?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Int32)</a></td><td><div class="summary">
            Constructs a curve from a set of control-point locations.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateFillet.htm">CreateFillet</a></td><td><div class="summary">
            Computes the fillet arc for a curve filleting operation.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_CreateFilletCurves.htm">CreateFilletCurves</a></td><td><div class="summary">
            Creates a tangent arc between two curves and trims or extends the curves to the arc.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateInterpolatedCurve.htm">CreateInterpolatedCurve(IEnumerable<span id="LSTE1ED6617_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_20?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Point3d<span id="LSTE1ED6617_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_21?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Int32)</a></td><td><div class="summary">
            Interpolates a sequence of points. Used by InterpCurve Command
            This routine works best when degree=3.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateInterpolatedCurve_1.htm">CreateInterpolatedCurve(IEnumerable<span id="LSTE1ED6617_22"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_22?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Point3d<span id="LSTE1ED6617_23"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_23?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Int32, CurveKnotStyle)</a></td><td><div class="summary">
            Interpolates a sequence of points. Used by InterpCurve Command
            This routine works best when degree=3.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateInterpolatedCurve_2.htm">CreateInterpolatedCurve(IEnumerable<span id="LSTE1ED6617_24"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_24?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Point3d<span id="LSTE1ED6617_25"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_25?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Int32, CurveKnotStyle, Vector3d, Vector3d)</a></td><td><div class="summary">
            Interpolates a sequence of points. Used by InterpCurve Command
            This routine works best when degree=3.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateMeanCurve.htm">CreateMeanCurve(Curve, Curve)</a></td><td><div class="summary">
            Constructs a mean, or average, curve from two curves.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateMeanCurve_1.htm">CreateMeanCurve(Curve, Curve, Double)</a></td><td><div class="summary">
            Constructs a mean, or average, curve from two curves.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateTweenCurves.htm">CreateTweenCurves</a></td><td><div class="summary">
            Creates curves between two open or closed input curves. Uses the control points of the curves for finding tween curves.
            That means the first control point of first curve is matched to first control point of the second curve and so on.
            There is no matching of curves direction. Caller must match input curves direction before calling the function.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateTweenCurvesWithMatching.htm">CreateTweenCurvesWithMatching</a></td><td><div class="summary">
            Creates curves between two open or closed input curves. Make the structure of input curves compatible if needed.
            Refits the input curves to have the same structure. The resulting curves are usually more complex than input unless
            input curves are compatible and no refit is needed. There is no matching of curves direction.
            Caller must match input curves direction before calling the function.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_CreateTweenCurvesWithSampling.htm">CreateTweenCurvesWithSampling</a></td><td><div class="summary">
            Creates curves between two open or closed input curves. Use sample points method to make curves compatible.
            This is how the algorithm workd: Divides the two curves into an equal number of points, finds the midpoint between the
            corresponding points on the curves and interpolates the tween curve through those points. There is no matching of curves
            direction. Caller must match input curves direction before calling the function.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_CurvatureAt.htm">CurvatureAt</a></td><td><div class="summary">Evaluate the curvature vector at a curve parameter.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_DerivativeAt.htm">DerivativeAt(Double, Int32)</a></td><td><div class="summary">
            Evaluate the derivatives at the specified curve parameter.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_DerivativeAt_1.htm">DerivativeAt(Double, Int32, CurveEvaluationSide)</a></td><td><div class="summary">
            Evaluate the derivatives at the specified curve parameter.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Runtime_CommonObject_Dispose.htm">Dispose<span id="LSTE1ED6617_26"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_26?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
            Actively reclaims unmanaged resources that this instance uses.
            </div> (Inherited from <a href="T_Rhino_Runtime_CommonObject.htm">CommonObject</a>.)</td></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Rhino_Geometry_Curve_Dispose.htm">Dispose(Boolean)</a></td><td><div class="summary">
            For derived class implementers.
            <p>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</p><p>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</p><p>Also, you must call the base virtual method within your overriding method.</p></div> (Overrides <a href="M_Rhino_Runtime_CommonObject_Dispose_1.htm">CommonObject<span id="LSTE1ED6617_27"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_27?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Dispose(Boolean)</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_DivideAsContour.htm">DivideAsContour</a></td><td><div class="summary">
            Divides this curve at fixed steps along a defined contour line.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_DivideByCount.htm">DivideByCount(Int32, Boolean)</a></td><td><div class="summary">
            Divide the curve into a number of equal-length segments.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_DivideByCount_1.htm">DivideByCount(Int32, Boolean, <span id="LSTE1ED6617_28"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_28?cpp=array&lt;");</script>Point3d<span id="LSTE1ED6617_29"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_29?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LSTE1ED6617_30"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_30?cpp=%");</script>)</a></td><td><div class="summary">
            Divide the curve into a number of equal-length segments.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_DivideByLength.htm">DivideByLength(Double, Boolean)</a></td><td><div class="summary">
            Divide the curve into specific length segments.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_DivideByLength_1.htm">DivideByLength(Double, Boolean, <span id="LSTE1ED6617_31"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_31?cpp=array&lt;");</script>Point3d<span id="LSTE1ED6617_32"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_32?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LSTE1ED6617_33"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_33?cpp=%");</script>)</a></td><td><div class="summary">
            Divide the curve into specific length segments.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_DivideEquidistant.htm">DivideEquidistant</a></td><td><div class="summary">
            Calculates 3d points on a curve where the linear distance between the points is equal.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_DoDirectionsMatch.htm">DoDirectionsMatch</a></td><td><div class="summary">
            Determines whether two curves travel more or less in the same direction.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Duplicate.htm">Duplicate</a></td><td><div class="summary">
            Constructs an exact duplicate of this Curve.
            </div> (Overrides <a href="M_Rhino_Geometry_GeometryBase_Duplicate.htm">GeometryBase<span id="LSTE1ED6617_34"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_34?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Duplicate<span id="LSTE1ED6617_35"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_35?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_DuplicateCurve.htm">DuplicateCurve</a></td><td><div class="summary">
            Constructs an exact duplicate of this curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_DuplicateSegments.htm">DuplicateSegments</a></td><td><div class="summary">
            Polylines will be exploded into line segments. ExplodeCurves will
            return the curves in topological order.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_DuplicateShallow.htm">DuplicateShallow</a></td><td><div class="summary">
            Constructs a light copy of this object. By "light", it is meant that the same
            underlying data is used until something is done to attempt to change it. For example,
            you could have a shallow copy of a very heavy mesh object and the same underlying
            data will be used when doing things like inspecting the number of faces on the mesh.
            If you modify the location of one of the mesh vertices, the shallow copy will create
            a full duplicate of the underlying mesh data and the shallow copy will become a
            deep copy.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Runtime_CommonObject_EnsurePrivateCopy.htm">EnsurePrivateCopy</a></td><td><div class="summary">
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </div> (Inherited from <a href="T_Rhino_Runtime_CommonObject.htm">CommonObject</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/bsc2ak47" target="_blank">Equals</a></td><td><div class="summary">Determines whether the specified object is equal to the current object.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Extend_3.htm">Extend(Interval)</a></td><td><div class="summary">
            Where possible, analytically extends curve to include the given domain.
            This will not work on closed curves. The original curve will be identical to the
            restriction of the resulting curve to the original curve domain.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Extend_4.htm">Extend(Double, Double)</a></td><td><div class="summary">
            Where possible, analytically extends curve to include the given domain.
            This will not work on closed curves. The original curve will be identical to the
            restriction of the resulting curve to the original curve domain.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Extend.htm">Extend(CurveEnd, CurveExtensionStyle, Point3d)</a></td><td><div class="summary">
            Extends a curve to a point.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_Extend_1.htm">Extend(CurveEnd, CurveExtensionStyle, IEnumerable<span id="LSTE1ED6617_36"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_36?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>GeometryBase<span id="LSTE1ED6617_37"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_37?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a></td><td><div class="summary">
            Extends a curve until it intersects a collection of objects.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Extend_2.htm">Extend(CurveEnd, Double, CurveExtensionStyle)</a></td><td><div class="summary">
            Extends a curve by a specific length.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ExtendByArc.htm">ExtendByArc</a></td><td><div class="summary">
            Extends a curve by an Arc until it intersects a collection of objects.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ExtendByLine.htm">ExtendByLine</a></td><td><div class="summary">
            Extends a curve by a line until it intersects a collection of objects.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ExtendOnSurface.htm">ExtendOnSurface(CurveEnd, BrepFace)</a></td><td><div class="summary">
            Extends a curve on a surface.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ExtendOnSurface_1.htm">ExtendOnSurface(CurveEnd, Surface)</a></td><td><div class="summary">
            Extends a curve on a surface.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Fair.htm">Fair</a></td><td><div class="summary">
            Fairs a curve object. Fair works best on degree 3 (cubic) curves. Attempts to
            remove large curvature variations while limiting the geometry changes to be no
            more than the specified tolerance.
            </div></td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Rhino_Runtime_CommonObject_Finalize.htm">Finalize</a></td><td><div class="summary">
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </div> (Inherited from <a href="T_Rhino_Runtime_CommonObject.htm">CommonObject</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Fit.htm">Fit</a></td><td><div class="summary">
            Fits a new curve through an existing curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_FrameAt.htm">FrameAt</a></td><td><div class="summary">Returns a 3d frame at a parameter.</div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_GeometryBase_GetBoundingBox_3.htm">GetBoundingBox(Boolean)</a></td><td><div class="summary">
            Boundingbox solver. Gets the world axis aligned boundingbox for the geometry.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_GeometryBase_GetBoundingBox.htm">GetBoundingBox(Plane)</a></td><td><div class="summary">
            Aligned Boundingbox solver. Gets the plane aligned boundingbox.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_GetBoundingBox_2.htm">GetBoundingBox(Transform)</a></td><td><div class="summary">
            Aligned Boundingbox solver. Gets the world axis aligned boundingbox for the transformed geometry.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_GetBoundingBox_1.htm">GetBoundingBox(Plane, Box<span id="LSTE1ED6617_38"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_38?cpp=%");</script>)</a></td><td><div class="summary">
            Aligned Boundingbox solver. Gets the plane aligned boundingbox.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_GetCurveParameterFromNurbsFormParameter.htm">GetCurveParameterFromNurbsFormParameter</a></td><td><div class="summary">
            Convert a NURBS curve parameter to a curve parameter.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_GetDistancesBetweenCurves.htm">GetDistancesBetweenCurves</a></td><td><div class="summary">
            Computes the distances between two arbitrary curves that overlap.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_GetFilletPoints.htm">GetFilletPoints</a></td><td><div class="summary">
            Finds points at which to cut a pair of curves so that a fillet of given radius can be inserted.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/zdee4b3y" target="_blank">GetHashCode</a></td><td><div class="summary">Serves as the default hash function. </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_GetLength.htm">GetLength<span id="LSTE1ED6617_39"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_39?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
            Gets the length of the curve with a fractional tolerance of 1.0e-8.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_GetLength_2.htm">GetLength(Double)</a></td><td><div class="summary">Get the length of the curve.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_GetLength_1.htm">GetLength(Interval)</a></td><td><div class="summary">Get the length of a sub-section of the curve with a fractional tolerance of 1e-8.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_GetLength_3.htm">GetLength(Double, Interval)</a></td><td><div class="summary">Get the length of a sub-section of the curve.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_GetNextDiscontinuity.htm">GetNextDiscontinuity</a></td><td><div class="summary">
            Searches for a derivative, tangent, or curvature discontinuity.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_GetNurbsFormParameterFromCurveParameter.htm">GetNurbsFormParameterFromCurveParameter</a></td><td><div class="summary">Convert a curve parameter to a NURBS curve parameter.</div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Runtime_CommonObject_GetObjectData.htm">GetObjectData</a></td><td><div class="summary">
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </div> (Inherited from <a href="T_Rhino_Runtime_CommonObject.htm">CommonObject</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_GetPerpendicularFrames.htm">GetPerpendicularFrames</a></td><td><div class="summary">
            Gets a collection of perpendicular frames along the curve. Perpendicular frames
            are also known as 'Zero-twisting frames' and they minimize rotation from one frame to the next.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/dfwy45w9" target="_blank">GetType</a></td><td><div class="summary">Gets the <a href="http://msdn2.microsoft.com/en-us/library/42892f65" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_GetUserString.htm">GetUserString</a></td><td><div class="summary">
            Gets user string from this geometry.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_GetUserStrings.htm">GetUserStrings</a></td><td><div class="summary">
            Gets a copy of all (user key string, user value string) pairs attached to this geometry.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_HasNurbsForm.htm">HasNurbsForm</a></td><td><div class="summary">
            Does a NURBS curve representation of this curve exist?
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsArc.htm">IsArc<span id="LSTE1ED6617_40"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_40?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
            Test a curve to see if it can be represented by an arc or circle within RhinoMath.ZeroTolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsArc_1.htm">IsArc(Double)</a></td><td><div class="summary">
            Test a curve to see if it can be represented by an arc or circle within the given tolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsCircle.htm">IsCircle<span id="LSTE1ED6617_41"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_41?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
            Test a curve to see if it can be represented by a circle within RhinoMath.ZeroTolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsCircle_1.htm">IsCircle(Double)</a></td><td><div class="summary">
            Test a curve to see if it can be represented by a circle within the given tolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsClosable.htm">IsClosable(Double)</a></td><td><div class="summary">
            Decide if it makes sense to close off this curve by moving the endpoint
            to the start based on start-end gap size and length of curve as
            approximated by chord defined by 6 points.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsClosable_1.htm">IsClosable(Double, Double, Double)</a></td><td><div class="summary">
            Decide if it makes sense to close off this curve by moving the endpoint
            to the start based on start-end gap size and length of curve as
            approximated by chord defined by 6 points.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsContinuous.htm">IsContinuous</a></td><td><div class="summary">
            Test continuity at a curve parameter value.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsEllipse.htm">IsEllipse<span id="LSTE1ED6617_42"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_42?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
            Test a curve to see if it can be represented by an ellipse within RhinoMath.ZeroTolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsEllipse_1.htm">IsEllipse(Double)</a></td><td><div class="summary">
            Test a curve to see if it can be represented by an ellipse within a given tolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsInPlane.htm">IsInPlane(Plane)</a></td><td><div class="summary">Test a curve to see if it lies in a specific plane.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsInPlane_1.htm">IsInPlane(Plane, Double)</a></td><td><div class="summary">Test a curve to see if it lies in a specific plane.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_IsLinear.htm">IsLinear<span id="LSTE1ED6617_43"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_43?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
            Test a curve to see if it is linear to within RhinoMath.ZeroTolerance units (1e-12).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsLinear_1.htm">IsLinear(Double)</a></td><td><div class="summary">
            Test a curve to see if it is linear to within the custom tolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_IsPlanar.htm">IsPlanar<span id="LSTE1ED6617_44"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_44?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">Test a curve for planarity.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsPlanar_1.htm">IsPlanar(Double)</a></td><td><div class="summary">Test a curve for planarity.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_IsPolyline.htm">IsPolyline</a></td><td><div class="summary">
            Several types of Curve can have the form of a polyline
            including a degree 1 NurbsCurve, a PolylineCurve,
            and a PolyCurve all of whose segments are some form of
            polyline. IsPolyline tests a curve to see if it can be
            represented as a polyline.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_IsShort.htm">IsShort(Double)</a></td><td><div class="summary">Used to quickly find short curves.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_IsShort_1.htm">IsShort(Double, Interval)</a></td><td><div class="summary">Used to quickly find short curves.</div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Runtime_CommonObject_IsValidWithLog.htm">IsValidWithLog</a></td><td><div class="summary">
            Determines if an object is valid. Also provides a report on errors if this
            object happens not to be valid.
            </div> (Inherited from <a href="T_Rhino_Runtime_CommonObject.htm">CommonObject</a>.)</td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_JoinCurves.htm">JoinCurves(IEnumerable<span id="LSTE1ED6617_45"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_45?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Curve<span id="LSTE1ED6617_46"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_46?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a></td><td><div class="summary">
            Joins a collection of curve segments together.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_JoinCurves_1.htm">JoinCurves(IEnumerable<span id="LSTE1ED6617_47"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_47?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Curve<span id="LSTE1ED6617_48"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_48?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Double)</a></td><td><div class="summary">
            Joins a collection of curve segments together.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_JoinCurves_2.htm">JoinCurves(IEnumerable<span id="LSTE1ED6617_49"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_49?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Curve<span id="LSTE1ED6617_50"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_50?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Double, Boolean)</a></td><td><div class="summary">
            Joins a collection of curve segments together.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_LengthParameter.htm">LengthParameter(Double, Double<span id="LSTE1ED6617_51"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_51?cpp=%");</script>)</a></td><td><div class="summary">
            Gets the parameter along the curve which coincides with a given length along the curve.
            A fractional tolerance of 1e-8 is used in this version of the function.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_LengthParameter_1.htm">LengthParameter(Double, Double<span id="LSTE1ED6617_52"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_52?cpp=%");</script>, Interval)</a></td><td><div class="summary">
            Gets the parameter along the curve which coincides with a given length along the curve.
            A fractional tolerance of 1e-8 is used in this version of the function.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_LengthParameter_2.htm">LengthParameter(Double, Double<span id="LSTE1ED6617_53"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_53?cpp=%");</script>, Double)</a></td><td><div class="summary">
            Gets the parameter along the curve which coincides with a given length along the curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_LengthParameter_3.htm">LengthParameter(Double, Double<span id="LSTE1ED6617_54"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_54?cpp=%");</script>, Double, Interval)</a></td><td><div class="summary">
            Gets the parameter along the curve which coincides with a given length along the curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_MakeClosed.htm">MakeClosed</a></td><td><div class="summary">
            If IsClosed, just return true. Otherwise, decide if curve can be closed as
            follows: Linear curves polylinear curves with 2 segments, Nurbs with 3 or less
            control points cannot be made closed. Also, if tolerance &gt; 0 and the gap between
            start and end is larger than tolerance, curve cannot be made closed.
            Adjust the curve's endpoint to match its start point.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_MakeDeformable.htm">MakeDeformable</a></td><td><div class="summary">
            If possible, converts the object into a form that can be accurately modified
            with "squishy" transformations like projections, shears, an non-uniform scaling.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_MakeEndsMeet.htm">MakeEndsMeet</a></td><td><div class="summary">
            Makes adjustments to the ends of one or both input curves so that they meet at a point.
            </div></td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/57ctke0a" target="_blank">MemberwiseClone</a></td><td><div class="summary">Creates a shallow copy of the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_MemoryEstimate.htm">MemoryEstimate</a></td><td><div class="summary">
            Computes an estimate of the number of bytes that this object is using in memory.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Rhino_Geometry_Curve_NonConstOperation.htm">NonConstOperation</a></td><td><div class="summary">
            For derived classes implementers.
            <p>Defines the necessary implementation to free the instance from being const.</p></div> (Overrides <a href="M_Rhino_Runtime_CommonObject_NonConstOperation.htm">CommonObject<span id="LSTE1ED6617_55"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_55?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>NonConstOperation<span id="LSTE1ED6617_56"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_56?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_NormalizedLengthParameter.htm">NormalizedLengthParameter(Double, Double<span id="LSTE1ED6617_57"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_57?cpp=%");</script>)</a></td><td><div class="summary">
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            A fractional tolerance of 1e-8 is used in this version of the function.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_NormalizedLengthParameter_1.htm">NormalizedLengthParameter(Double, Double<span id="LSTE1ED6617_58"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_58?cpp=%");</script>, Interval)</a></td><td><div class="summary">
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            A fractional tolerance of 1e-8 is used in this version of the function.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_NormalizedLengthParameter_2.htm">NormalizedLengthParameter(Double, Double<span id="LSTE1ED6617_59"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_59?cpp=%");</script>, Double)</a></td><td><div class="summary">
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_NormalizedLengthParameter_3.htm">NormalizedLengthParameter(Double, Double<span id="LSTE1ED6617_60"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_60?cpp=%");</script>, Double, Interval)</a></td><td><div class="summary">
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_NormalizedLengthParameters.htm">NormalizedLengthParameters(<span id="LSTE1ED6617_61"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_61?cpp=array&lt;");</script>Double<span id="LSTE1ED6617_62"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_62?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Double)</a></td><td><div class="summary">
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            A fractional tolerance of 1e-8 is used in this version of the function.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_NormalizedLengthParameters_1.htm">NormalizedLengthParameters(<span id="LSTE1ED6617_63"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_63?cpp=array&lt;");</script>Double<span id="LSTE1ED6617_64"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_64?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Double, Interval)</a></td><td><div class="summary">
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            A fractional tolerance of 1e-8 is used in this version of the function.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_NormalizedLengthParameters_2.htm">NormalizedLengthParameters(<span id="LSTE1ED6617_65"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_65?cpp=array&lt;");</script>Double<span id="LSTE1ED6617_66"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_66?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Double, Double)</a></td><td><div class="summary">
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_NormalizedLengthParameters_3.htm">NormalizedLengthParameters(<span id="LSTE1ED6617_67"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_67?cpp=array&lt;");</script>Double<span id="LSTE1ED6617_68"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_68?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Double, Double, Interval)</a></td><td><div class="summary">
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Offset.htm">Offset(Plane, Double, Double, CurveOffsetCornerStyle)</a></td><td><div class="summary">
            Offsets this curve. If you have a nice offset, then there will be one entry in
            the array. If the original curve had kinks or the offset curve had self
            intersections, you will get multiple segments in the offset_curves[] array.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Offset_1.htm">Offset(Point3d, Vector3d, Double, Double, CurveOffsetCornerStyle)</a></td><td><div class="summary">
            Offsets this curve. If you have a nice offset, then there will be one entry in
            the array. If the original curve had kinks or the offset curve had self
            intersections, you will get multiple segments in the offset_curves[] array.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_OffsetNormalToSurface.htm">OffsetNormalToSurface</a></td><td><div class="summary">
            Finds a curve by offsetting an existing curve normal to a surface.
            The caller is responsible for ensuring that the curve lies on the input surface.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_OffsetOnSurface.htm">OffsetOnSurface(BrepFace, Point2d, Double)</a></td><td><div class="summary">
            Offset a curve on a brep face surface. This curve must lie on the surface.
            <p>This overload allows to specify a surface point at which the offset will pass.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_OffsetOnSurface_1.htm">OffsetOnSurface(BrepFace, Double, Double)</a></td><td><div class="summary">
            Offset this curve on a brep face surface. This curve must lie on the surface.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_OffsetOnSurface_3.htm">OffsetOnSurface(Surface, Point2d, Double)</a></td><td><div class="summary">
            Offset a curve on a surface. This curve must lie on the surface.
            <p>This overload allows to specify a surface point at which the offset will pass.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_OffsetOnSurface_4.htm">OffsetOnSurface(Surface, Double, Double)</a></td><td><div class="summary">
            Offset a curve on a surface. This curve must lie on the surface.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_OffsetOnSurface_2.htm">OffsetOnSurface(BrepFace, <span id="LSTE1ED6617_69"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_69?cpp=array&lt;");</script>Double<span id="LSTE1ED6617_70"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_70?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LSTE1ED6617_71"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_71?cpp=array&lt;");</script>Double<span id="LSTE1ED6617_72"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_72?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Double)</a></td><td><div class="summary">
            Offset a curve on a brep face surface. This curve must lie on the surface.
            <p>This overload allows to specify different offsets for different curve parameters.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_OffsetOnSurface_5.htm">OffsetOnSurface(Surface, <span id="LSTE1ED6617_73"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_73?cpp=array&lt;");</script>Double<span id="LSTE1ED6617_74"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_74?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LSTE1ED6617_75"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_75?cpp=array&lt;");</script>Double<span id="LSTE1ED6617_76"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_76?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, Double)</a></td><td><div class="summary">
            Offset this curve on a surface. This curve must lie on the surface.
            <p>This overload allows to specify different offsets for different curve parameters.</p></div></td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_OnSwitchToNonConst.htm">OnSwitchToNonConst</a></td><td><div class="summary">
            Is called when a non-const operation occurs.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_PerpendicularFrameAt.htm">PerpendicularFrameAt</a></td><td><div class="summary">
            Return a 3d frame at a parameter. This is slightly different than FrameAt in
            that the frame is computed in a way so there is minimal rotation from one
            frame to the next.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_PlanarClosedCurveRelationship.htm">PlanarClosedCurveRelationship</a></td><td><div class="summary">
            Determines whether two coplanar simple closed curves are disjoint or intersect;
            otherwise, if the regions have a containment relationship, discovers
            which curve encloses the other.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_PlanarCurveCollision.htm">PlanarCurveCollision</a></td><td><div class="summary">
            Determines if two coplanar curves collide (intersect).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_PointAt.htm">PointAt</a></td><td><div class="summary">Evaluates point at a curve parameter.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_PointAtLength.htm">PointAtLength</a></td><td><div class="summary">
            Gets a point at a certain length along the curve. The length must be
            non-negative and less than or equal to the length of the curve.
            Lengths will not be wrapped when the curve is closed or periodic.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_PointAtNormalizedLength.htm">PointAtNormalizedLength</a></td><td><div class="summary">
            Gets a point at a certain normalized length along the curve. The length must be
            between or including 0.0 and 1.0, where 0.0 equals the start of the curve and
            1.0 equals the end of the curve.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_ProjectToBrep.htm">ProjectToBrep(Curve, Brep, Vector3d, Double)</a></td><td><div class="summary">
            Projects a Curve onto a Brep along a given direction.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_ProjectToBrep_1.htm">ProjectToBrep(Curve, IEnumerable<span id="LSTE1ED6617_77"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_77?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Brep<span id="LSTE1ED6617_78"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_78?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Vector3d, Double)</a></td><td><div class="summary">
            Projects a Curve onto a collection of Breps along a given direction.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_ProjectToBrep_3.htm">ProjectToBrep(IEnumerable<span id="LSTE1ED6617_79"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_79?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Curve<span id="LSTE1ED6617_80"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_80?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, IEnumerable<span id="LSTE1ED6617_81"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_81?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Brep<span id="LSTE1ED6617_82"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_82?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Vector3d, Double)</a></td><td><div class="summary">
            Projects a collection of Curves onto a collection of Breps along a given direction.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_ProjectToBrep_2.htm">ProjectToBrep(Curve, IEnumerable<span id="LSTE1ED6617_83"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_83?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Brep<span id="LSTE1ED6617_84"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_84?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Vector3d, Double, <span id="LSTE1ED6617_85"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_85?cpp=array&lt;");</script>Int32<span id="LSTE1ED6617_86"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_86?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LSTE1ED6617_87"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_87?cpp=%");</script>)</a></td><td><div class="summary">
            Projects a Curve onto a collection of Breps along a given direction.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_ProjectToBrep_4.htm">ProjectToBrep(IEnumerable<span id="LSTE1ED6617_88"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_88?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Curve<span id="LSTE1ED6617_89"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_89?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, IEnumerable<span id="LSTE1ED6617_90"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_90?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Brep<span id="LSTE1ED6617_91"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_91?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Vector3d, Double, <span id="LSTE1ED6617_92"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_92?cpp=array&lt;");</script>Int32<span id="LSTE1ED6617_93"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_93?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LSTE1ED6617_94"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_94?cpp=%");</script>, <span id="LSTE1ED6617_95"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_95?cpp=array&lt;");</script>Int32<span id="LSTE1ED6617_96"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_96?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LSTE1ED6617_97"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_97?cpp=%");</script>)</a></td><td><div class="summary">
            Projects a collection of Curves onto a collection of Breps along a given direction.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_ProjectToMesh.htm">ProjectToMesh(Curve, Mesh, Vector3d, Double)</a></td><td><div class="summary">
            Projects a curve to a mesh using a direction and tolerance.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_ProjectToMesh_1.htm">ProjectToMesh(Curve, IEnumerable<span id="LSTE1ED6617_98"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_98?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Mesh<span id="LSTE1ED6617_99"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_99?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Vector3d, Double)</a></td><td><div class="summary">
            Projects a curve to a set of meshes using a direction and tolerance.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_ProjectToMesh_2.htm">ProjectToMesh(IEnumerable<span id="LSTE1ED6617_100"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_100?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Curve<span id="LSTE1ED6617_101"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_101?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, IEnumerable<span id="LSTE1ED6617_102"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_102?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Mesh<span id="LSTE1ED6617_103"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_103?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Vector3d, Double)</a></td><td><div class="summary">
            Projects a curve to a set of meshes using a direction and tolerance.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_ProjectToPlane.htm">ProjectToPlane</a></td><td><div class="summary">
            Constructs a curve by projecting an existing curve to a plane.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_PullToBrepFace.htm">PullToBrepFace(BrepFace, Double)</a></td><td><div class="summary">
            Pulls this curve to a brep face and returns the result of that operation.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Curve_PullToBrepFace_1.htm">PullToBrepFace(Curve, BrepFace, Double)</a></td><td><div class="summary">
            Pull a curve to a BrepFace using closest point projection.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_PullToMesh.htm">PullToMesh</a></td><td><div class="summary">
            Makes a polyline approximation of the curve and gets the closest point on the mesh for each point on the curve.
            Then it "connects the points" so that you have a polyline on the mesh.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Rebuild.htm">Rebuild</a></td><td><div class="summary">
            Rebuild a curve with a specific point count.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_RemoveShortSegments.htm">RemoveShortSegments</a></td><td><div class="summary">
            Looks for segments that are shorter than tolerance that can be removed.
            Does not change the domain, but it will change the relative parameterization.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_Reverse.htm">Reverse</a></td><td><div class="summary">
            Reverses the direction of the curve.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_Rotate.htm">Rotate</a></td><td><div class="summary">
            Rotates the object about the specified axis. A positive rotation
            angle results in a counter-clockwise rotation about the axis (right hand rule).
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_Scale.htm">Scale</a></td><td><div class="summary">
            Scales the object by the specified factor. The scale is centered at the origin.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_SetEndPoint.htm">SetEndPoint</a></td><td><div class="summary">Forces the curve to end at a specified point.
            Not all curve types support this operation.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_SetStartPoint.htm">SetStartPoint</a></td><td><div class="summary">Forces the curve to start at a specified point.
            Not all curve types support this operation.</div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_SetUserString.htm">SetUserString</a></td><td><div class="summary">
            Attach a user string (key,value combination) to this geometry.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Simplify.htm">Simplify</a></td><td><div class="summary">
            Returns a geometrically equivalent PolyCurve.
            <p>The PolyCurve has the following properties</p><p>
            	1. All the PolyCurve segments are LineCurve, PolylineCurve, ArcCurve, or NurbsCurve.
            </p><p>
            	2. The Nurbs Curves segments do not have fully multiple interior knots.
            </p><p>
            	3. Rational Nurbs curves do not have constant weights.
            </p><p>
            	4. Any segment for which IsLinear() or IsArc() is true is a Line,
            Polyline segment, or an Arc.
            </p><p>
            	5. Adjacent Colinear or Cocircular segments are combined.
            </p><p>
            	6. Segments that meet with G1-continuity have there ends tuned up so
            that they meet with G1-continuity to within machine precision.
            </p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_SimplifyEnd.htm">SimplifyEnd</a></td><td><div class="summary">
            Same as SimplifyCurve, but simplifies only the last two segments at "side" end.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_SpanDomain.htm">SpanDomain</a></td><td><div class="summary">
            Get the domain of the curve span with the given index.
            Use the SpanCount property to test how many spans there are.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Split_2.htm">Split(IEnumerable<span id="LSTE1ED6617_104"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_104?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>Double<span id="LSTE1ED6617_105"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_105?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a></td><td><div class="summary">
            Splits (divides) the curve at a series of specified parameters.
            The parameter must be in the interior of the curve's domain.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Split_3.htm">Split(Double)</a></td><td><div class="summary">
            Splits (divides) the curve at the specified parameter.
            The parameter must be in the interior of the curve's domain.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Split.htm">Split(Brep, Double)</a></td><td><div class="summary">
            Splits a curve into pieces using a polysurface.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Split_1.htm">Split(Surface, Double)</a></td><td><div class="summary">
            Splits a curve into pieces using a surface.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TangentAt.htm">TangentAt</a></td><td><div class="summary">Evaluates the unit tangent vector at a curve parameter.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ToNurbsCurve.htm">ToNurbsCurve<span id="LSTE1ED6617_106"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_106?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
            Constructs a NURBS curve representation of this curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ToNurbsCurve_1.htm">ToNurbsCurve(Interval)</a></td><td><div class="summary">
            Constructs a NURBS curve representation of this curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ToPolyline.htm">ToPolyline(Int32, Int32, Double, Double, Double, Double, Double, Double, Boolean)</a></td><td><div class="summary">
            Gets a polyline approximation of a curve.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_ToPolyline_1.htm">ToPolyline(Int32, Int32, Double, Double, Double, Double, Double, Double, Boolean, Interval)</a></td><td><div class="summary">
            Gets a polyline approximation of a curve.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/7bxwbwt2" target="_blank">ToString</a></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_Transform.htm">Transform</a></td><td><div class="summary">
            Transforms the geometry. If the input Transform has a SimilarityType of
            OrientationReversing, you may want to consider flipping the transformed
            geometry after calling this function when it makes sense. For example,
            you may want to call Flip() on a Brep after transforming it.
            </div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_Translate.htm">Translate(Vector3d)</a></td><td><div class="summary">Translates the object along the specified vector.</div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_GeometryBase_Translate_1.htm">Translate(Double, Double, Double)</a></td><td><div class="summary">Translates the object along the specified vector.</div> (Inherited from <a href="T_Rhino_Geometry_GeometryBase.htm">GeometryBase</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Trim_1.htm">Trim(Interval)</a></td><td><div class="summary">
            Removes portions of the curve outside the specified interval.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Trim_2.htm">Trim(Double, Double)</a></td><td><div class="summary">
            Removes portions of the curve outside the specified interval.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_Trim.htm">Trim(CurveEnd, Double)</a></td><td><div class="summary">
            Shortens a curve by a given length
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetArc.htm">TryGetArc(Arc<span id="LSTE1ED6617_107"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_107?cpp=%");</script>)</a></td><td><div class="summary">
            Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetArc_1.htm">TryGetArc(Arc<span id="LSTE1ED6617_108"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_108?cpp=%");</script>, Double)</a></td><td><div class="summary">
            Try to convert this curve into an Arc using a custom tolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetArc_2.htm">TryGetArc(Plane, Arc<span id="LSTE1ED6617_109"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_109?cpp=%");</script>)</a></td><td><div class="summary">
            Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetArc_3.htm">TryGetArc(Plane, Arc<span id="LSTE1ED6617_110"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_110?cpp=%");</script>, Double)</a></td><td><div class="summary">
            Try to convert this curve into an Arc using a custom tolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetCircle.htm">TryGetCircle(Circle<span id="LSTE1ED6617_111"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_111?cpp=%");</script>)</a></td><td><div class="summary">
            Try to convert this curve into a circle using RhinoMath.ZeroTolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetCircle_1.htm">TryGetCircle(Circle<span id="LSTE1ED6617_112"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_112?cpp=%");</script>, Double)</a></td><td><div class="summary">
            Try to convert this curve into a Circle using a custom tolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetEllipse.htm">TryGetEllipse(Ellipse<span id="LSTE1ED6617_113"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_113?cpp=%");</script>)</a></td><td><div class="summary">
            Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetEllipse_1.htm">TryGetEllipse(Ellipse<span id="LSTE1ED6617_114"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_114?cpp=%");</script>, Double)</a></td><td><div class="summary">
            Try to convert this curve into an Ellipse using a custom tolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetEllipse_2.htm">TryGetEllipse(Plane, Ellipse<span id="LSTE1ED6617_115"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_115?cpp=%");</script>)</a></td><td><div class="summary">
            Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetEllipse_3.htm">TryGetEllipse(Plane, Ellipse<span id="LSTE1ED6617_116"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_116?cpp=%");</script>, Double)</a></td><td><div class="summary">
            Try to convert this curve into an Ellipse using a custom tolerance.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetPlane.htm">TryGetPlane(Plane<span id="LSTE1ED6617_117"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_117?cpp=%");</script>)</a></td><td><div class="summary">Test a curve for planarity and return the plane.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetPlane_1.htm">TryGetPlane(Plane<span id="LSTE1ED6617_118"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_118?cpp=%");</script>, Double)</a></td><td><div class="summary">Test a curve for planarity and return the plane.</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetPolyline.htm">TryGetPolyline(Polyline<span id="LSTE1ED6617_119"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_119?cpp=%");</script>)</a></td><td><div class="summary">
            Several types of Curve can have the form of a polyline
            including a degree 1 NurbsCurve, a PolylineCurve,
            and a PolyCurve all of whose segments are some form of
            polyline. IsPolyline tests a curve to see if it can be
            represented as a polyline.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Curve_TryGetPolyline_1.htm">TryGetPolyline(Polyline<span id="LSTE1ED6617_120"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_120?cpp=%");</script>, <span id="LSTE1ED6617_121"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_121?cpp=array&lt;");</script>Double<span id="LSTE1ED6617_122"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_122?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LSTE1ED6617_123"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE1ED6617_123?cpp=%");</script>)</a></td><td><div class="summary">
            Several types of Curve can have the form of a polyline
            including a degree 1 NurbsCurve, a PolylineCurve,
            and a PolyCurve all of whose segments are some form of
            polyline. IsPolyline tests a curve to see if it can be
            represented as a polyline.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID1RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_Curve.htm">Curve Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Updated 4 October 2015 - Robert McNeel and Associates<p><a href="http://discourse.mcneel.com/" target="_blank">Report wishes and bugs: http://discourse.mcneel.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:steve%40mcneel.com?Subject=RhinoCommon SDK">steve@mcneel.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>