<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>OptionToggle Constructor (Boolean, String, String)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Rhino.Input.Custom.OptionToggle.#ctor(System.Boolean,System.String,System.String)" /><meta name="Description" content="Rhino.Input.Custom.OptionToggle" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Input.Custom" /><meta name="file" content="M_Rhino_Input_Custom_OptionToggle__ctor_1" /><meta name="guid" content="M_Rhino_Input_Custom_OptionToggle__ctor_1" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon SDK<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino.htm" title="RhinoCommon SDK" tocid="roottoc">RhinoCommon SDK</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino_Input_Custom.htm" title="Rhino.Input.Custom" tocid="N_Rhino_Input_Custom">Rhino.Input.Custom</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Rhino_Input_Custom_OptionToggle.htm" title="OptionToggle Class" tocid="T_Rhino_Input_Custom_OptionToggle">OptionToggle Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Input_Custom_OptionToggle__ctor.htm" title="OptionToggle Constructor " tocid="Overload_Rhino_Input_Custom_OptionToggle__ctor">OptionToggle Constructor </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Input_Custom_OptionToggle__ctor.htm" title="OptionToggle Constructor (Boolean, LocalizeStringPair, LocalizeStringPair)" tocid="M_Rhino_Input_Custom_OptionToggle__ctor">OptionToggle Constructor (Boolean, LocalizeStringPair, LocalizeStringPair)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Input_Custom_OptionToggle__ctor_1.htm" title="OptionToggle Constructor (Boolean, String, String)" tocid="M_Rhino_Input_Custom_OptionToggle__ctor_1">OptionToggle Constructor (Boolean, String, String)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">OptionToggle Constructor (Boolean, String, String)</td></tr></table><span class="introStyle">Rhino for Mac 5.1</span><div class="summary">Initializes a new instance of the <a href="T_Rhino_Input_Custom_OptionToggle.htm">OptionToggle</a> class</div><p> </p><strong>Namespace:</strong> <a href="N_Rhino_Input_Custom.htm">Rhino.Input.Custom</a><br /><strong>Assembly:</strong> RhinoCommon (in RhinoCommon.dll) Version: 5.1.50000.0 (5.0.20693.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">OptionToggle</span>(
	<span class="identifier">bool</span> <span class="parameter">initialValue</span>,
	<span class="identifier">string</span> <span class="parameter">offValue</span>,
	<span class="identifier">string</span> <span class="parameter">onValue</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">New</span> ( 
	<span class="parameter">initialValue</span> <span class="keyword">As</span> <span class="identifier">Boolean</span>,
	<span class="parameter">offValue</span> <span class="keyword">As</span> <span class="identifier">String</span>,
	<span class="parameter">onValue</span> <span class="keyword">As</span> <span class="identifier">String</span>
)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">initialValue</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">System<span id="LSTC08F3EEC_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTC08F3EEC_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Boolean</a><br /><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="initialValue"/&gt; documentation for "M:Rhino.Input.Custom.OptionToggle.#ctor(System.Boolean,System.String,System.String)"]</p></dd><dt><span class="parameter">offValue</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">System<span id="LSTC08F3EEC_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTC08F3EEC_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>String</a><br /><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="offValue"/&gt; documentation for "M:Rhino.Input.Custom.OptionToggle.#ctor(System.Boolean,System.String,System.String)"]</p></dd><dt><span class="parameter">onValue</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">System<span id="LSTC08F3EEC_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTC08F3EEC_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>String</a><br /><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="onValue"/&gt; documentation for "M:Rhino.Input.Custom.OptionToggle.#ctor(System.Boolean,System.String,System.String)"]</p></dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBEBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBEBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBEBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBEBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBEBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBBEBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBEBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result CommandLineOptions(Rhino.RhinoDoc doc)
  {
    <span class="highlight-comment">// For this example we will use a GetPoint class, but all of the custom</span>
    <span class="highlight-comment">// "Get" classes support command line options.</span>
    Rhino.Input.Custom.GetPoint gp = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetPoint();
    gp.SetCommandPrompt(<span class="highlight-literal">"GetPoint with options"</span>);

    <span class="highlight-comment">// set up the options</span>
    Rhino.Input.Custom.OptionInteger intOption = <span class="highlight-keyword">new</span> Rhino.Input.Custom.OptionInteger(<span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">99</span>);
    Rhino.Input.Custom.OptionDouble dblOption = <span class="highlight-keyword">new</span> Rhino.Input.Custom.OptionDouble(<span class="highlight-number">2.2</span>, <span class="highlight-number">0</span>, <span class="highlight-number">99.9</span>);
    Rhino.Input.Custom.OptionToggle boolOption = <span class="highlight-keyword">new</span> Rhino.Input.Custom.OptionToggle(<span class="highlight-keyword">true</span>, <span class="highlight-literal">"Off"</span>, <span class="highlight-literal">"On"</span>);
    <span class="highlight-keyword">string</span>[] listValues = <span class="highlight-keyword">new</span> <span class="highlight-keyword">string</span>[] { <span class="highlight-literal">"Item0"</span>, <span class="highlight-literal">"Item1"</span>, <span class="highlight-literal">"Item2"</span>, <span class="highlight-literal">"Item3"</span>, <span class="highlight-literal">"Item4"</span> };

    gp.AddOptionInteger(<span class="highlight-literal">"Integer"</span>, <span class="highlight-keyword">ref</span> intOption);
    gp.AddOptionDouble(<span class="highlight-literal">"Double"</span>, <span class="highlight-keyword">ref</span> dblOption);
    gp.AddOptionToggle(<span class="highlight-literal">"Boolean"</span>, <span class="highlight-keyword">ref</span> boolOption);
    <span class="highlight-keyword">int</span> listIndex = <span class="highlight-number">3</span>;
    <span class="highlight-keyword">int</span> opList = gp.AddOptionList(<span class="highlight-literal">"List"</span>, listValues, listIndex);

    <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>)
    {
      <span class="highlight-comment">// perform the get operation. This will prompt the user to input a point, but also</span>
      <span class="highlight-comment">// allow for command line options defined above</span>
      Rhino.Input.GetResult get_rc = gp.Get();
      <span class="highlight-keyword">if</span> (gp.CommandResult() != Rhino.Commands.Result.Success)
        <span class="highlight-keyword">return</span> gp.CommandResult();

      <span class="highlight-keyword">if</span> (get_rc == Rhino.Input.GetResult.Point)
      {
        doc.Objects.AddPoint(gp.Point());
        doc.Views.Redraw();
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Command line option values are"</span>);
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Integer = {0}"</span>, intOption.CurrentValue);
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Double = {0}"</span>, dblOption.CurrentValue);
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Boolean = {0}"</span>, boolOption.CurrentValue);
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" List = {0}"</span>, listValues[listIndex]);
      }
      <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (get_rc == Rhino.Input.GetResult.Option)
      {
        <span class="highlight-keyword">if</span> (gp.OptionIndex() == opList)
          listIndex = gp.Option().CurrentListOptionIndex;
        <span class="highlight-keyword">continue</span>;
      }
      <span class="highlight-keyword">break</span>;
    }
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}</pre></div><div id="ID0EBBEBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> CommandLineOptions(<span class="highlight-keyword">ByVal</span> doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-comment">' For this example we will use a GetPoint class, but all of the custom</span>
    <span class="highlight-comment">' "Get" classes support command line options.</span>
    <span class="highlight-keyword">Dim</span> gp <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetPoint()
    gp.SetCommandPrompt(<span class="highlight-literal">"GetPoint with options"</span>)

    <span class="highlight-comment">' set up the options</span>
    <span class="highlight-keyword">Dim</span> intOption <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.OptionInteger(<span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">99</span>)
    <span class="highlight-keyword">Dim</span> dblOption <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.OptionDouble(<span class="highlight-number">2.2</span>, <span class="highlight-number">0</span>, <span class="highlight-number">99.9</span>)
    <span class="highlight-keyword">Dim</span> boolOption <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.OptionToggle(<span class="highlight-keyword">True</span>, <span class="highlight-literal">"Off"</span>, <span class="highlight-literal">"On"</span>)
    <span class="highlight-keyword">Dim</span> listValues <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">String</span>() {<span class="highlight-literal">"Item0"</span>, <span class="highlight-literal">"Item1"</span>, <span class="highlight-literal">"Item2"</span>, <span class="highlight-literal">"Item3"</span>, <span class="highlight-literal">"Item4"</span>}

    gp.AddOptionInteger(<span class="highlight-literal">"Integer"</span>, intOption)
    gp.AddOptionDouble(<span class="highlight-literal">"Double"</span>, dblOption)
    gp.AddOptionToggle(<span class="highlight-literal">"Boolean"</span>, boolOption)
    <span class="highlight-keyword">Dim</span> listIndex <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span>
    <span class="highlight-keyword">Dim</span> opList <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = gp.AddOptionList(<span class="highlight-literal">"List"</span>, listValues, listIndex)

    <span class="highlight-keyword">While</span> <span class="highlight-keyword">True</span>
      <span class="highlight-comment">' perform the get operation. This will prompt the user to input a point, but also</span>
      <span class="highlight-comment">' allow for command line options defined above</span>
      <span class="highlight-keyword">Dim</span> get_rc <span class="highlight-keyword">As</span> Rhino.Input.GetResult = gp.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gp.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gp.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">If</span> get_rc = Rhino.Input.GetResult.Point <span class="highlight-keyword">Then</span>
        doc.Objects.AddPoint(gp.Point())
        doc.Views.Redraw()
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Command line option values are"</span>)
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Integer = {0}"</span>, intOption.CurrentValue)
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Double = {0}"</span>, dblOption.CurrentValue)
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Boolean = {0}"</span>, boolOption.CurrentValue)
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" List = {0}"</span>, listValues(listIndex))
      <span class="highlight-keyword">ElseIf</span> get_rc = Rhino.Input.GetResult.[<span class="highlight-keyword">Option</span>] <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">If</span> gp.OptionIndex() = opList <span class="highlight-keyword">Then</span>
          listIndex = gp.[<span class="highlight-keyword">Option</span>]().CurrentListOptionIndex
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">While</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">While</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBEBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAEBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAEBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAEBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext

<span class="highlight-keyword">def</span> CommandLineOptions():
    <span class="highlight-comment"># For this example we will use a GetPoint class, but all of the custom</span>
    <span class="highlight-comment"># "Get" classes support command line options.</span>
    gp = Rhino.Input.Custom.GetPoint()
    gp.SetCommandPrompt(<span class="highlight-literal">"GetPoint with options"</span>)

    <span class="highlight-comment"># set up the options</span>
    intOption = Rhino.Input.Custom.OptionInteger(<span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">99</span>)
    dblOption = Rhino.Input.Custom.OptionDouble(<span class="highlight-number">2.2</span>, <span class="highlight-number">0</span>, <span class="highlight-number">99.9</span>)
    boolOption = Rhino.Input.Custom.OptionToggle(True, <span class="highlight-literal">"Off"</span>, <span class="highlight-literal">"On"</span>)
    listValues = <span class="highlight-literal">"Item0"</span>, <span class="highlight-literal">"Item1"</span>, <span class="highlight-literal">"Item2"</span>, <span class="highlight-literal">"Item3"</span>, <span class="highlight-literal">"Item4"</span>

    gp.AddOptionInteger(<span class="highlight-literal">"Integer"</span>, intOption)
    gp.AddOptionDouble(<span class="highlight-literal">"Double"</span>, dblOption)
    gp.AddOptionToggle(<span class="highlight-literal">"Boolean"</span>, boolOption)
    listIndex = <span class="highlight-number">3</span>
    opList = gp.AddOptionList(<span class="highlight-literal">"List"</span>, listValues, listIndex)
    <span class="highlight-keyword">while</span> True:
        <span class="highlight-comment"># perform the get operation. This will prompt the user to</span>
        <span class="highlight-comment"># input a point, but also allow for command line options</span>
        <span class="highlight-comment"># defined above</span>
        get_rc = gp.Get()
        <span class="highlight-keyword">if</span> gp.CommandResult()!=Rhino.Commands.Result.Success:
            <span class="highlight-keyword">return</span> gp.CommandResult()
        <span class="highlight-keyword">if</span> get_rc==Rhino.Input.GetResult.Point:
            point = gp.Point()
            scriptcontext.doc.Objects.AddPoint(point)
            scriptcontext.doc.Views.Redraw()
            <span class="highlight-keyword">print</span> <span class="highlight-literal">"Command line option values are"</span>
            <span class="highlight-keyword">print</span> <span class="highlight-literal">" Integer ="</span>, intOption.CurrentValue
            <span class="highlight-keyword">print</span> <span class="highlight-literal">" Double ="</span>, dblOption.CurrentValue
            <span class="highlight-keyword">print</span> <span class="highlight-literal">" Boolean ="</span>, boolOption.CurrentValue
            <span class="highlight-keyword">print</span> <span class="highlight-literal">" List ="</span>, listValues[listIndex]
        <span class="highlight-keyword">elif</span> get_rc==Rhino.Input.GetResult.Option:
            <span class="highlight-keyword">if</span> gp.OptionIndex()==opList:
              listIndex = gp.Option().CurrentListOptionIndex
            <span class="highlight-keyword">continue</span>
        <span class="highlight-keyword">break</span>
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success


<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
    CommandLineOptions()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAEBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Input_Custom_OptionToggle.htm">OptionToggle Class</a></div><div class="seeAlsoStyle"><a href="Overload_Rhino_Input_Custom_OptionToggle__ctor.htm">OptionToggle Overload</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Input_Custom.htm">Rhino.Input.Custom Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Updated 4 October 2015 - Robert McNeel and Associates<p><a href="http://discourse.mcneel.com/" target="_blank">Report wishes and bugs: http://discourse.mcneel.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:steve%40mcneel.com?Subject=RhinoCommon SDK">steve@mcneel.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>