<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Transform.PlaneToPlane Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="PlaneToPlane method" /><meta name="System.Keywords" content="Transform.PlaneToPlane method" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.Transform.PlaneToPlane" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.Transform.PlaneToPlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane)" /><meta name="Description" content="summaryM:Rhino.Geometry.Transform.PlaneToPlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="M_Rhino_Geometry_Transform_PlaneToPlane" /><meta name="guid" content="M_Rhino_Geometry_Transform_PlaneToPlane" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon SDK<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino.htm" title="RhinoCommon SDK" tocid="roottoc">RhinoCommon SDK</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Rhino_Geometry_Transform.htm" title="Transform Structure" tocid="T_Rhino_Geometry_Transform">Transform Structure</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Rhino_Geometry_Transform.htm" title="Transform Methods" tocid="Methods_T_Rhino_Geometry_Transform">Transform Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Transform_ChangeBasis.htm" title="ChangeBasis Method " tocid="Overload_Rhino_Geometry_Transform_ChangeBasis">ChangeBasis Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_CompareTo.htm" title="CompareTo Method " tocid="M_Rhino_Geometry_Transform_CompareTo">CompareTo Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Transform_Equals.htm" title="Equals Method " tocid="Overload_Rhino_Geometry_Transform_Equals">Equals Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_GetHashCode.htm" title="GetHashCode Method " tocid="M_Rhino_Geometry_Transform_GetHashCode">GetHashCode Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Transform_Mirror.htm" title="Mirror Method " tocid="Overload_Rhino_Geometry_Transform_Mirror">Mirror Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_Multiply.htm" title="Multiply Method " tocid="M_Rhino_Geometry_Transform_Multiply">Multiply Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_PlanarProjection.htm" title="PlanarProjection Method " tocid="M_Rhino_Geometry_Transform_PlanarProjection">PlanarProjection Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_PlaneToPlane.htm" title="PlaneToPlane Method " tocid="M_Rhino_Geometry_Transform_PlaneToPlane">PlaneToPlane Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Transform_Rotation.htm" title="Rotation Method " tocid="Overload_Rhino_Geometry_Transform_Rotation">Rotation Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Transform_Scale.htm" title="Scale Method " tocid="Overload_Rhino_Geometry_Transform_Scale">Scale Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_Shear.htm" title="Shear Method " tocid="M_Rhino_Geometry_Transform_Shear">Shear Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_ToFloatArray.htm" title="ToFloatArray Method " tocid="M_Rhino_Geometry_Transform_ToFloatArray">ToFloatArray Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_ToString.htm" title="ToString Method " tocid="M_Rhino_Geometry_Transform_ToString">ToString Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_TransformBoundingBox.htm" title="TransformBoundingBox Method " tocid="M_Rhino_Geometry_Transform_TransformBoundingBox">TransformBoundingBox Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_TransformList.htm" title="TransformList Method " tocid="M_Rhino_Geometry_Transform_TransformList">TransformList Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Transform_Translation.htm" title="Translation Method " tocid="Overload_Rhino_Geometry_Transform_Translation">Translation Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_Transpose.htm" title="Transpose Method " tocid="M_Rhino_Geometry_Transform_Transpose">Transpose Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Transform_TryGetInverse.htm" title="TryGetInverse Method " tocid="M_Rhino_Geometry_Transform_TryGetInverse">TryGetInverse Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Transform<span id="LSTACA25F6B_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTACA25F6B_0?cpp=::|nu=.");</script>PlaneToPlane Method </td></tr></table><span class="introStyle">Rhino for Mac 5.1</span><div class="summary"><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "M:Rhino.Geometry.Transform.PlaneToPlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane)"]</p></div><p> </p><strong>Namespace:</strong> <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br /><strong>Assembly:</strong> RhinoCommon (in RhinoCommon.dll) Version: 5.1.50000.0 (5.0.20693.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">Transform</span> <span class="identifier">PlaneToPlane</span>(
	<span class="identifier">Plane</span> <span class="parameter">plane0</span>,
	<span class="identifier">Plane</span> <span class="parameter">plane1</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">PlaneToPlane</span> ( 
	<span class="parameter">plane0</span> <span class="keyword">As</span> <span class="identifier">Plane</span>,
	<span class="parameter">plane1</span> <span class="keyword">As</span> <span class="identifier">Plane</span>
) <span class="keyword">As</span> <span class="identifier">Transform</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">plane0</span></dt><dd>Type: <a href="T_Rhino_Geometry_Plane.htm">Rhino.Geometry<span id="LSTACA25F6B_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTACA25F6B_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Plane</a><br /><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="plane0"/&gt; documentation for "M:Rhino.Geometry.Transform.PlaneToPlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane)"]</p></dd><dt><span class="parameter">plane1</span></dt><dd>Type: <a href="T_Rhino_Geometry_Plane.htm">Rhino.Geometry<span id="LSTACA25F6B_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTACA25F6B_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Plane</a><br /><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="plane1"/&gt; documentation for "M:Rhino.Geometry.Transform.PlaneToPlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane)"]</p></dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="T_Rhino_Geometry_Transform.htm">Transform</a><br /><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;returns&gt; documentation for "M:Rhino.Geometry.Transform.PlaneToPlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane)"]</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBEBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBEBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBEBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBEBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBEBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBBEBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBEBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result OrientOnSrf(Rhino.RhinoDoc doc)
  {
    <span class="highlight-comment">// Select objects to orient</span>
    Rhino.Input.Custom.GetObject go = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetObject();
    go.SetCommandPrompt(<span class="highlight-literal">"Select objects to orient"</span>);
    go.SubObjectSelect = <span class="highlight-keyword">false</span>;
    go.GroupSelect = <span class="highlight-keyword">true</span>;
    go.GetMultiple(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>);
    <span class="highlight-keyword">if</span> (go.CommandResult() != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> go.CommandResult();

    <span class="highlight-comment">// Point to orient from</span>
    Rhino.Input.Custom.GetPoint gp = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetPoint();
    gp.SetCommandPrompt(<span class="highlight-literal">"Point to orient from"</span>);
    gp.Get();
    <span class="highlight-keyword">if</span> (gp.CommandResult() != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> gp.CommandResult();

    <span class="highlight-comment">// Define source plane</span>
    Rhino.Display.RhinoView view = gp.View();
    <span class="highlight-keyword">if</span> (view == <span class="highlight-keyword">null</span>)
    {
      view = doc.Views.ActiveView;
      <span class="highlight-keyword">if</span> (view == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;
    }
    Rhino.Geometry.Plane source_plane = view.ActiveViewport.ConstructionPlane();
    source_plane.Origin = gp.Point();

    <span class="highlight-comment">// Surface to orient on</span>
    Rhino.Input.Custom.GetObject gs = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetObject();
    gs.SetCommandPrompt(<span class="highlight-literal">"Surface to orient on"</span>);
    gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface;
    gs.SubObjectSelect = <span class="highlight-keyword">true</span>;
    gs.DeselectAllBeforePostSelect = <span class="highlight-keyword">false</span>;
    gs.OneByOnePostSelect = <span class="highlight-keyword">true</span>;
    gs.Get();
    <span class="highlight-keyword">if</span> (gs.CommandResult() != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> gs.CommandResult();

    Rhino.DocObjects.ObjRef objref = gs.Object(<span class="highlight-number">0</span>);
    <span class="highlight-comment">// get selected surface object</span>
    Rhino.DocObjects.RhinoObject obj = objref.Object();
    <span class="highlight-keyword">if</span> (obj == <span class="highlight-keyword">null</span>)
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;
    <span class="highlight-comment">// get selected surface (face)</span>
    Rhino.Geometry.Surface surface = objref.Surface();
    <span class="highlight-keyword">if</span> (surface == <span class="highlight-keyword">null</span>)
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;
    <span class="highlight-comment">// Unselect surface</span>
    obj.Select(<span class="highlight-keyword">false</span>);

    <span class="highlight-comment">// Point on surface to orient to</span>
    gp.SetCommandPrompt(<span class="highlight-literal">"Point on surface to orient to"</span>);
    gp.Constrain(surface, <span class="highlight-keyword">false</span>);
    gp.Get();
    <span class="highlight-keyword">if</span> (gp.CommandResult() != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> gp.CommandResult();

    <span class="highlight-comment">// Do transformation</span>
    Rhino.Commands.Result rc = Rhino.Commands.Result.Failure;
    <span class="highlight-keyword">double</span> u, v;
    <span class="highlight-keyword">if</span> (surface.ClosestPoint(gp.Point(), <span class="highlight-keyword">out</span> u, <span class="highlight-keyword">out</span> v))
    {
      Rhino.Geometry.Plane target_plane;
      <span class="highlight-keyword">if</span> (surface.FrameAt(u, v, <span class="highlight-keyword">out</span> target_plane))
      {
        <span class="highlight-comment">// Build transformation</span>
        Rhino.Geometry.Transform xform = Rhino.Geometry.Transform.PlaneToPlane(source_plane, target_plane);

        <span class="highlight-comment">// Do the transformation. In this example, we will copy the original objects</span>
        <span class="highlight-keyword">const</span> <span class="highlight-keyword">bool</span> delete_original = <span class="highlight-keyword">false</span>;
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; go.ObjectCount; i++)
          doc.Objects.Transform(go.Object(i), xform, delete_original);

        doc.Views.Redraw();
        rc = Rhino.Commands.Result.Success;
      }
    }
    <span class="highlight-keyword">return</span> rc;
  }
}</pre></div><div id="ID0EBBEBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> OrientOnSrf(<span class="highlight-keyword">ByVal</span> doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-comment">' Select objects to orient</span>
    <span class="highlight-keyword">Dim</span> go <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select objects to orient"</span>)
    go.SubObjectSelect = <span class="highlight-keyword">False</span>
    go.GroupSelect = <span class="highlight-keyword">True</span>
    go.GetMultiple(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>)
    <span class="highlight-keyword">If</span> go.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> go.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Point to orient from</span>
    <span class="highlight-keyword">Dim</span> gp <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetPoint()
    gp.SetCommandPrompt(<span class="highlight-literal">"Point to orient from"</span>)
    gp.<span class="highlight-keyword">Get</span>()
    <span class="highlight-keyword">If</span> gp.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> gp.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Define source plane</span>
    <span class="highlight-keyword">Dim</span> view <span class="highlight-keyword">As</span> Rhino.Display.RhinoView = gp.View()
    <span class="highlight-keyword">If</span> view <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      view = doc.Views.ActiveView
      <span class="highlight-keyword">If</span> view <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Dim</span> source_plane <span class="highlight-keyword">As</span> Rhino.Geometry.Plane = view.ActiveViewport.ConstructionPlane()
    source_plane.Origin = gp.Point()

    <span class="highlight-comment">' Surface to orient on</span>
    <span class="highlight-keyword">Dim</span> gs <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetObject()
    gs.SetCommandPrompt(<span class="highlight-literal">"Surface to orient on"</span>)
    gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface
    gs.SubObjectSelect = <span class="highlight-keyword">True</span>
    gs.DeselectAllBeforePostSelect = <span class="highlight-keyword">False</span>
    gs.OneByOnePostSelect = <span class="highlight-keyword">True</span>
    gs.<span class="highlight-keyword">Get</span>()
    <span class="highlight-keyword">If</span> gs.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> gs.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> objref <span class="highlight-keyword">As</span> Rhino.DocObjects.ObjRef = gs.[<span class="highlight-keyword">Object</span>](<span class="highlight-number">0</span>)
    <span class="highlight-comment">' get selected surface object</span>
    <span class="highlight-keyword">Dim</span> obj <span class="highlight-keyword">As</span> Rhino.DocObjects.RhinoObject = objref.[<span class="highlight-keyword">Object</span>]()
    <span class="highlight-keyword">If</span> obj <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-comment">' get selected surface (face)</span>
    <span class="highlight-keyword">Dim</span> surface <span class="highlight-keyword">As</span> Rhino.Geometry.Surface = objref.Surface()
    <span class="highlight-keyword">If</span> surface <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-comment">' Unselect surface</span>
    obj.[<span class="highlight-keyword">Select</span>](<span class="highlight-keyword">False</span>)

    <span class="highlight-comment">' Point on surface to orient to</span>
    gp.SetCommandPrompt(<span class="highlight-literal">"Point on surface to orient to"</span>)
    gp.Constrain(surface, <span class="highlight-keyword">False</span>)
    gp.<span class="highlight-keyword">Get</span>()
    <span class="highlight-keyword">If</span> gp.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> gp.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Do transformation</span>
    <span class="highlight-keyword">Dim</span> rc <span class="highlight-keyword">As</span> Rhino.Commands.Result = Rhino.Commands.Result.Failure
    <span class="highlight-keyword">Dim</span> u <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>, v <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
    <span class="highlight-keyword">If</span> surface.ClosestPoint(gp.Point(), u, v) <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Dim</span> target_plane <span class="highlight-keyword">As</span> Rhino.Geometry.Plane
      <span class="highlight-keyword">If</span> surface.FrameAt(u, v, target_plane) <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' Build transformation</span>
        <span class="highlight-keyword">Dim</span> xform <span class="highlight-keyword">As</span> Rhino.Geometry.Transform = Rhino.Geometry.Transform.PlaneToPlane(source_plane, target_plane)

        <span class="highlight-comment">' Do the transformation. In this example, we will copy the original objects</span>
        <span class="highlight-keyword">Const</span> delete_original <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
        <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> go.ObjectCount - <span class="highlight-number">1</span>
          doc.Objects.Transform(go.[<span class="highlight-keyword">Object</span>](i), xform, delete_original)
        <span class="highlight-keyword">Next</span>

        doc.Views.Redraw()
        rc = Rhino.Commands.Result.Success
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Return</span> rc
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBEBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAEBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAEBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAEBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext
<span class="highlight-keyword">import</span> System.Guid

<span class="highlight-keyword">def</span> OrientOnSrf():
    <span class="highlight-comment"># Select objects to orient</span>
    go = Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select objects to orient"</span>)
    go.SubObjectSelect = False
    go.GroupSelect = True
    go.GetMultiple(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>)
    <span class="highlight-keyword">if</span> go.CommandResult()!=Rhino.Commands.Result.Success:
        <span class="highlight-keyword">return</span> go.CommandResult()

    <span class="highlight-comment"># Point to orient from</span>
    gp = Rhino.Input.Custom.GetPoint()
    gp.SetCommandPrompt(<span class="highlight-literal">"Point to orient from"</span>)
    gp.Get()
    <span class="highlight-keyword">if</span> gp.CommandResult()!=Rhino.Commands.Result.Success:
        <span class="highlight-keyword">return</span> gp.CommandResult()

    <span class="highlight-comment"># Define source plane</span>
    view = gp.View()
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> view:
        view = doc.Views.ActiveView
        <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> view: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure

    source_plane = view.ActiveViewport.ConstructionPlane()
    source_plane.Origin = gp.Point()

    <span class="highlight-comment"># Surface to orient on</span>
    gs = Rhino.Input.Custom.GetObject()
    gs.SetCommandPrompt(<span class="highlight-literal">"Surface to orient on"</span>)
    gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface
    gs.SubObjectSelect = True
    gs.DeselectAllBeforePostSelect = False
    gs.OneByOnePostSelect = True
    gs.Get()
    <span class="highlight-keyword">if</span> gs.CommandResult()!=Rhino.Commands.Result.Success:
        <span class="highlight-keyword">return</span> gs.CommandResult()

    objref = gs.Object(<span class="highlight-number">0</span>)
    <span class="highlight-comment"># get selected surface object</span>
    obj = objref.Object()
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> obj: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure
    <span class="highlight-comment"># get selected surface (face)</span>
    surface = objref.Surface()
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> surface: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure
    <span class="highlight-comment"># Unselect surface</span>
    obj.Select(False)

    <span class="highlight-comment"># Point on surface to orient to</span>
    gp.SetCommandPrompt(<span class="highlight-literal">"Point on surface to orient to"</span>)
    gp.Constrain(surface, False)
    gp.Get()
    <span class="highlight-keyword">if</span> gp.CommandResult()!=Rhino.Commands.Result.Success:
        <span class="highlight-keyword">return</span> gp.CommandResult()

    <span class="highlight-comment"># Do transformation</span>
    rc = Rhino.Commands.Result.Failure
    getrc, u, v = surface.ClosestPoint(gp.Point())
    <span class="highlight-keyword">if</span> getrc:
        getrc, target_plane = surface.FrameAt(u,v)
        <span class="highlight-keyword">if</span> getrc:
            <span class="highlight-comment"># Build transformation</span>
            xform = Rhino.Geometry.Transform.PlaneToPlane(source_plane, target_plane)
            <span class="highlight-comment"># Do the transformation. In this example, we will copy the original objects</span>
            delete_original = False
            <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(go.ObjectCount):
                rhobj = go.Object(i)
                scriptcontext.doc.Objects.Transform(rhobj, xform, delete_original)
            scriptcontext.doc.Views.Redraw()
            rc = Rhino.Commands.Result.Success
    <span class="highlight-keyword">return</span> rc


<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    OrientOnSrf()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAEBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_Transform.htm">Transform Structure</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Updated 4 October 2015 - Robert McNeel and Associates<p><a href="http://discourse.mcneel.com/" target="_blank">Report wishes and bugs: http://discourse.mcneel.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:steve%40mcneel.com?Subject=RhinoCommon SDK">steve@mcneel.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>