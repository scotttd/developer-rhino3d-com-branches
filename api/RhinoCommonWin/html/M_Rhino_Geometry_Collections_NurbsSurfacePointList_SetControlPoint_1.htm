<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>NurbsSurfacePointList.SetControlPoint Method (Int32, Int32, Point3d)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(System.Int32,System.Int32,Rhino.Geometry.Point3d)" /><meta name="Description" content="Sets the control point at the given (u, v) index." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry.Collections" /><meta name="file" content="M_Rhino_Geometry_Collections_NurbsSurfacePointList_SetControlPoint_1" /><meta name="guid" content="M_Rhino_Geometry_Collections_NurbsSurfacePointList_SetControlPoint_1" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon SDK<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino.htm" title="RhinoCommon SDK" tocid="roottoc">RhinoCommon SDK</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Rhino_Geometry_Collections.htm" title="Rhino.Geometry.Collections" tocid="N_Rhino_Geometry_Collections">Rhino.Geometry.Collections</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Rhino_Geometry_Collections_NurbsSurfacePointList.htm" title="NurbsSurfacePointList Class" tocid="T_Rhino_Geometry_Collections_NurbsSurfacePointList">NurbsSurfacePointList Class</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Rhino_Geometry_Collections_NurbsSurfacePointList.htm" title="NurbsSurfacePointList Methods" tocid="Methods_T_Rhino_Geometry_Collections_NurbsSurfacePointList">NurbsSurfacePointList Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Rhino_Geometry_Collections_NurbsSurfacePointList_SetControlPoint.htm" title="SetControlPoint Method " tocid="Overload_Rhino_Geometry_Collections_NurbsSurfacePointList_SetControlPoint">SetControlPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Collections_NurbsSurfacePointList_SetControlPoint.htm" title="SetControlPoint Method (Int32, Int32, ControlPoint)" tocid="M_Rhino_Geometry_Collections_NurbsSurfacePointList_SetControlPoint">SetControlPoint Method (Int32, Int32, ControlPoint)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="M_Rhino_Geometry_Collections_NurbsSurfacePointList_SetControlPoint_1.htm" title="SetControlPoint Method (Int32, Int32, Point3d)" tocid="M_Rhino_Geometry_Collections_NurbsSurfacePointList_SetControlPoint_1">SetControlPoint Method (Int32, Int32, Point3d)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">NurbsSurfacePointList<span id="LSTF480017A_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF480017A_0?cpp=::|nu=.");</script>SetControlPoint Method (Int32, Int32, Point3d)</td></tr></table><span class="introStyle">Rhino 5 for Windows</span><div class="summary">
            Sets the control point at the given (u, v) index.
            </div><p> </p><strong>Namespace:</strong> <a href="N_Rhino_Geometry_Collections.htm">Rhino.Geometry.Collections</a><br /><strong>Assembly:</strong> RhinoCommon (in RhinoCommon.dll) Version: 5.1.30000.16 (5.0.20693.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">bool</span> <span class="identifier">SetControlPoint</span>(
	<span class="identifier">int</span> <span class="parameter">u</span>,
	<span class="identifier">int</span> <span class="parameter">v</span>,
	<span class="identifier">Point3d</span> <span class="parameter">cp</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">SetControlPoint</span> ( 
	<span class="parameter">u</span> <span class="keyword">As</span> <span class="identifier">Integer</span>,
	<span class="parameter">v</span> <span class="keyword">As</span> <span class="identifier">Integer</span>,
	<span class="parameter">cp</span> <span class="keyword">As</span> <span class="identifier">Point3d</span>
) <span class="keyword">As</span> <span class="identifier">Boolean</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">u</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">System<span id="LSTF480017A_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF480017A_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Int32</a><br />Index of control-point along surface U direction.</dd><dt><span class="parameter">v</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">System<span id="LSTF480017A_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF480017A_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Int32</a><br />Index of control-point along surface V direction.</dd><dt><span class="parameter">cp</span></dt><dd>Type: <a href="T_Rhino_Geometry_Point3d.htm">Rhino.Geometry<span id="LSTF480017A_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF480017A_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Point3d</a><br />The control point location to set (weight is assumed to be 1.0).</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">Boolean</a><br />true on success, false on failure.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBABA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','cs','1','2');return false;">C#</a></div><div id="ID0EBBABA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EBBABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> Rhino.Geometry;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CreateSurfaceFromPointsAndKnotsCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csCreateSurfaceFromPointsAndKnots"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">bool</span> is_rational = <span class="highlight-keyword">false</span>;
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> number_of_dimensions = <span class="highlight-number">3</span>;
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> u_degree = <span class="highlight-number">2</span>;
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> v_degree = <span class="highlight-number">3</span>;
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> u_control_point_count = <span class="highlight-number">3</span>;
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> v_control_point_count = <span class="highlight-number">5</span>;

      <span class="highlight-comment">// The knot vectors do NOT have the 2 superfluous knots</span>
      <span class="highlight-comment">// at the start and end of the knot vector.  If you are</span>
      <span class="highlight-comment">// coming from a system that has the 2 superfluous knots,</span>
      <span class="highlight-comment">// just ignore them when creating NURBS surfaces.</span>
      <span class="highlight-keyword">var</span> u_knots = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[u_control_point_count + u_degree - <span class="highlight-number">1</span>];
      <span class="highlight-keyword">var</span> v_knots = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[v_control_point_count + v_degree - <span class="highlight-number">1</span>];

      <span class="highlight-comment">// make up a quadratic knot vector with no interior knots</span>
      u_knots[<span class="highlight-number">0</span>] = u_knots[<span class="highlight-number">1</span>] = <span class="highlight-number">0.0</span>;
      u_knots[<span class="highlight-number">2</span>] = u_knots[<span class="highlight-number">3</span>] = <span class="highlight-number">1.0</span>;

      <span class="highlight-comment">// make up a cubic knot vector with one simple interior knot</span>
      v_knots[<span class="highlight-number">0</span>] = v_knots[<span class="highlight-number">1</span>] = v_knots[<span class="highlight-number">2</span>] = <span class="highlight-number">0.0</span>;
      v_knots[<span class="highlight-number">3</span>] = <span class="highlight-number">1.5</span>;
      v_knots[<span class="highlight-number">4</span>] = v_knots[<span class="highlight-number">5</span>] = v_knots[<span class="highlight-number">6</span>] = <span class="highlight-number">2.0</span>;

      <span class="highlight-comment">// Rational control points can be in either homogeneous</span>
      <span class="highlight-comment">// or euclidean form. Non-rational control points do not</span>
      <span class="highlight-comment">// need to specify a weight.  </span>
      <span class="highlight-keyword">var</span> control_points = <span class="highlight-keyword">new</span> Point3d[u_control_point_count, v_control_point_count];

      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> u = <span class="highlight-number">0</span>; u &lt; u_control_point_count; u++)
      {
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> v = <span class="highlight-number">0</span>; v &lt; v_control_point_count; v++)
        {
          control_points[u,v] = <span class="highlight-keyword">new</span> Point3d(u, v, u-v);
        }
      }

      <span class="highlight-comment">// creates internal uninitialized arrays for </span>
      <span class="highlight-comment">// control points and knots</span>
      <span class="highlight-keyword">var</span> nurbs_surface = NurbsSurface.Create(
        number_of_dimensions,
        is_rational,
        u_degree + <span class="highlight-number">1</span>,
        v_degree + <span class="highlight-number">1</span>,
        u_control_point_count,
        v_control_point_count
        );

      <span class="highlight-comment">// add the knots</span>
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> u = <span class="highlight-number">0</span>;  u &lt; nurbs_surface.KnotsU.Count; u++)
        nurbs_surface.KnotsU[u] = u_knots[u];
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> v = <span class="highlight-number">0</span>; v &lt; nurbs_surface.KnotsV.Count; v++)
        nurbs_surface.KnotsV[v] = v_knots[v];

      <span class="highlight-comment">// add the control points</span>
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> u = <span class="highlight-number">0</span>; u &lt; nurbs_surface.Points.CountU; u++)
      {
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> v = <span class="highlight-number">0</span>; v &lt; nurbs_surface.Points.CountV; v++)
        {
          nurbs_surface.Points.SetControlPoint(u, v, control_points[u, v]);
        }
      }

      <span class="highlight-keyword">if</span> (nurbs_surface.IsValid)
      {
        doc.Objects.AddSurface(nurbs_surface);
        doc.Views.Redraw();
        <span class="highlight-keyword">return</span> Result.Success;
      }
      <span class="highlight-keyword">return</span> Result.Failure;
    }
  }
}</pre></div><div id="ID0EBBABA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> Rhino.Geometry

<span class="highlight-keyword">Namespace</span> examples_vb
  &lt;System.Runtime.InteropServices.Guid(<span class="highlight-literal">"652FCBE5-D8DC-4472-AB94-5A70998A3895"</span>)&gt; _
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> CreateSurfaceFromPointsAndKnotsCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbCreateSurfaceFromPointsAndKnots"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Const</span> isRational <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
      <span class="highlight-keyword">Const</span> numberOfDimensions <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span>
      <span class="highlight-keyword">Const</span> uDegree <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">2</span>
      <span class="highlight-keyword">Const</span> vDegree <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span>
      <span class="highlight-keyword">Const</span> uControlPointCount <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span>
      <span class="highlight-keyword">Const</span> vControlPointCount <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">5</span>

      <span class="highlight-comment">' The knot vectors do NOT have the 2 superfluous knots</span>
      <span class="highlight-comment">' at the start and end of the knot vector.  If you are</span>
      <span class="highlight-comment">' coming from a system that has the 2 superfluous knots,</span>
      <span class="highlight-comment">' just ignore them when creating NURBS surfaces.</span>
      <span class="highlight-keyword">Dim</span> uKnots = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Double</span>(uControlPointCount + uDegree - <span class="highlight-number">2</span>) {}
      <span class="highlight-keyword">Dim</span> vKnots = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Double</span>(vControlPointCount + vDegree - <span class="highlight-number">2</span>) {}

      <span class="highlight-comment">' make up a quadratic knot vector with no interior knots</span>
      uKnots(<span class="highlight-number">0</span>) = InlineAssignHelper(uKnots(<span class="highlight-number">1</span>), <span class="highlight-number">0.0</span>)
      uKnots(<span class="highlight-number">2</span>) = InlineAssignHelper(uKnots(<span class="highlight-number">3</span>), <span class="highlight-number">1.0</span>)

      <span class="highlight-comment">' make up a cubic knot vector with one simple interior knot</span>
      vKnots(<span class="highlight-number">0</span>) = InlineAssignHelper(vKnots(<span class="highlight-number">1</span>), InlineAssignHelper(vKnots(<span class="highlight-number">2</span>), <span class="highlight-number">0.0</span>))
      vKnots(<span class="highlight-number">3</span>) = <span class="highlight-number">1.5</span>
      vKnots(<span class="highlight-number">4</span>) = InlineAssignHelper(vKnots(<span class="highlight-number">5</span>), InlineAssignHelper(vKnots(<span class="highlight-number">6</span>), <span class="highlight-number">2.0</span>))

      <span class="highlight-comment">' Rational control points can be in either homogeneous</span>
      <span class="highlight-comment">' or euclidean form. Non-rational control points do not</span>
      <span class="highlight-comment">' need to specify a weight.  </span>
      <span class="highlight-keyword">Dim</span> controlPoints = <span class="highlight-keyword">New</span> Point3d(uControlPointCount - <span class="highlight-number">1</span>, vControlPointCount - <span class="highlight-number">1</span>) {}

      <span class="highlight-keyword">For</span> u <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> uControlPointCount - <span class="highlight-number">1</span>
        <span class="highlight-keyword">For</span> v <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> vControlPointCount - <span class="highlight-number">1</span>
          controlPoints(u, v) = <span class="highlight-keyword">New</span> Point3d(u, v, u - v)
        <span class="highlight-keyword">Next</span>
      <span class="highlight-keyword">Next</span>

      <span class="highlight-comment">' creates internal uninitialized arrays for </span>
      <span class="highlight-comment">' control points and knots</span>
      <span class="highlight-keyword">Dim</span> nurbsSurface__1 = NurbsSurface.Create(numberOfDimensions, isRational, uDegree + <span class="highlight-number">1</span>, vDegree + <span class="highlight-number">1</span>, uControlPointCount, vControlPointCount)

      <span class="highlight-comment">' add the knots</span>
      <span class="highlight-keyword">For</span> u <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> nurbsSurface__1.KnotsU.Count - <span class="highlight-number">1</span>
        nurbsSurface__1.KnotsU(u) = uKnots(u)
      <span class="highlight-keyword">Next</span>
      <span class="highlight-keyword">For</span> v <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> nurbsSurface__1.KnotsV.Count - <span class="highlight-number">1</span>
        nurbsSurface__1.KnotsV(v) = vKnots(v)
      <span class="highlight-keyword">Next</span>

      <span class="highlight-comment">' add the control points</span>
      <span class="highlight-keyword">For</span> u <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> nurbsSurface__1.Points.CountU - <span class="highlight-number">1</span>
        <span class="highlight-keyword">For</span> v <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> nurbsSurface__1.Points.CountV - <span class="highlight-number">1</span>
          nurbsSurface__1.Points.SetControlPoint(u, v, controlPoints(u, v))
        <span class="highlight-keyword">Next</span>
      <span class="highlight-keyword">Next</span>

      <span class="highlight-keyword">If</span> nurbsSurface__1.IsValid <span class="highlight-keyword">Then</span>
        doc.Objects.AddSurface(nurbsSurface__1)
        doc.Views.Redraw()
        <span class="highlight-keyword">Return</span> Result.Success
      <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> InlineAssignHelper(<span class="highlight-keyword">Of</span> T)(<span class="highlight-keyword">ByRef</span> target <span class="highlight-keyword">As</span> T, value <span class="highlight-keyword">As</span> T) <span class="highlight-keyword">As</span> T
      target = value
      <span class="highlight-keyword">Return</span> value
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBABA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">from</span> Rhino.Geometry <span class="highlight-keyword">import</span> Point3d, NurbsSurface, ControlPoint
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc

<span class="highlight-keyword">def</span> RunCommand():
  bIsRational = False
  dim = <span class="highlight-number">3</span>
  u_degree = <span class="highlight-number">2</span>
  v_degree = <span class="highlight-number">3</span>
  u_cv_count = <span class="highlight-number">3</span>
  v_cv_count = <span class="highlight-number">5</span>

  <span class="highlight-comment"># make up a quadratic knot vector with no interior knots</span>
  u_knot = [<span class="highlight-number">0.0</span>, <span class="highlight-number">0.0</span>, <span class="highlight-number">1.0</span>, <span class="highlight-number">1.0</span>] 

  <span class="highlight-comment"># make up a cubic knot vector with one simple interior knot</span>
  v_knot = [<span class="highlight-number">0.0</span>, <span class="highlight-number">0.0</span>, <span class="highlight-number">0.0</span>, <span class="highlight-number">1.5</span>, <span class="highlight-number">2.0</span>, <span class="highlight-number">2.0</span>, <span class="highlight-number">2.0</span>]

  <span class="highlight-comment"># Rational control points can be in either homogeneous</span>
  <span class="highlight-comment"># or euclidean form. Non-rational control points do not</span>
  <span class="highlight-comment"># need to specify a weight.  </span>
  CV = dict( ((i,j),None) <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">2</span>) <span class="highlight-keyword">for</span> j <span class="highlight-keyword">in</span> range(<span class="highlight-number">3</span>) )
  <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, u_cv_count):
    <span class="highlight-keyword">for</span> j <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, v_cv_count):
      CV[i,j] = Point3d(i, j, i-j)

  <span class="highlight-comment"># creates internal uninitialized arrays for </span>
  <span class="highlight-comment"># control points and knots</span>
  nurbs_surface = NurbsSurface.Create(
    dim,
    bIsRational,
    u_degree + <span class="highlight-number">1</span>,
    v_degree + <span class="highlight-number">1</span>,
    u_cv_count,
    v_cv_count
    )

  <span class="highlight-comment"># add the knots</span>
  <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, nurbs_surface.KnotsU.Count):
    nurbs_surface.KnotsU[i] = u_knot[i]
  <span class="highlight-keyword">for</span> j <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, nurbs_surface.KnotsV.Count):
    nurbs_surface.KnotsV[j] = v_knot[j]

  <span class="highlight-comment"># add the control points</span>
  <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, nurbs_surface.Points.CountU):
    <span class="highlight-keyword">for</span> j <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, nurbs_surface.Points.CountV):
      nurbs_surface.Points.SetControlPoint(i, j, ControlPoint(CV[i, j]))

  <span class="highlight-keyword">if</span> nurbs_surface.IsValid:
    doc.Objects.AddSurface(nurbs_surface)
    doc.Views.Redraw()

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
  RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_Collections_NurbsSurfacePointList.htm">NurbsSurfacePointList Class</a></div><div class="seeAlsoStyle"><a href="Overload_Rhino_Geometry_Collections_NurbsSurfacePointList_SetControlPoint.htm">SetControlPoint Overload</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry_Collections.htm">Rhino.Geometry.Collections Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Updated 10 March 2016 - Robert McNeel and Associates<p><a href="http://discourse.mcneel.com/" target="_blank">Report wishes and bugs: http://discourse.mcneel.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:steve%40mcneel.com?Subject=RhinoCommon SDK">steve@mcneel.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>